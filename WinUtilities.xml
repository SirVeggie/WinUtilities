<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinUtilities</name>
    </assembly>
    <members>
        <member name="T:WinUtilities.CoordType">
            <summary>Specifies the type of window coordinates used</summary>
        </member>
        <member name="F:WinUtilities.CoordType.Normal">
            <summary>Matches the visible area of the window</summary>
        </member>
        <member name="F:WinUtilities.CoordType.Raw">
            <summary>Matches the real area of the window</summary>
        </member>
        <member name="F:WinUtilities.CoordType.Client">
            <summary>Matches the client area of the window</summary>
        </member>
        <member name="T:WinUtilities.CoordRelation">
            <summary>Specifies what the coordinates are relative to</summary>
        </member>
        <member name="F:WinUtilities.CoordRelation.Screen">
            <summary>Position [0,0] is the primary screen's left upper corner</summary>
        </member>
        <member name="F:WinUtilities.CoordRelation.ActiveWindow">
            <summary>Position [0,0] is the active window's upper left corner</summary>
        </member>
        <member name="F:WinUtilities.CoordRelation.Mouse">
            <summary>Position [0,0] is the current mouse position</summary>
        </member>
        <member name="T:WinUtilities.EdgeType">
            <summary>Specifies which edge of an area to target</summary>
        </member>
        <member name="T:WinUtilities.Edge">
            <summary>A struct combining a target edge and a point</summary>
        </member>
        <member name="P:WinUtilities.Edge.Type">
            <summary>Edges to target</summary>
        </member>
        <member name="P:WinUtilities.Edge.Pos">
            <summary>Corner position</summary>
        </member>
        <member name="M:WinUtilities.Edge.#ctor(WinUtilities.EdgeType,WinUtilities.Coord)">
            <summary>Create a new <see cref="T:WinUtilities.Edge"/></summary>
        </member>
        <member name="M:WinUtilities.Edge.ToString">
            <summary></summary>
        </member>
        <member name="T:WinUtilities.Area">
            <summary>Specifies a rectangular area in [x, y] coordinates.</summary>
        </member>
        <member name="P:WinUtilities.Area.Point">
            <summary>Location of the upper left corner of the area</summary>
        </member>
        <member name="P:WinUtilities.Area.Size">
            <summary>Size of the area</summary>
        </member>
        <member name="P:WinUtilities.Area.X">
            <summary>Left edge of the area</summary>
        </member>
        <member name="P:WinUtilities.Area.Y">
            <summary>Top edge of the area</summary>
        </member>
        <member name="P:WinUtilities.Area.W">
            <summary>Width of the area</summary>
        </member>
        <member name="P:WinUtilities.Area.H">
            <summary>Height of the area</summary>
        </member>
        <member name="P:WinUtilities.Area.IntX">
            <summary>Left edge of the area as an int</summary>
        </member>
        <member name="P:WinUtilities.Area.IntY">
            <summary>Right edge of the area as an int</summary>
        </member>
        <member name="P:WinUtilities.Area.IntW">
            <summary>Width of the area as an int</summary>
        </member>
        <member name="P:WinUtilities.Area.IntH">
            <summary>Height of the area as an int</summary>
        </member>
        <member name="P:WinUtilities.Area.IsValid">
            <summary>Check if all the components are not NaN.</summary>
        </member>
        <member name="P:WinUtilities.Area.IsNaN">
            <summary>Check if all the components are NaN.</summary>
        </member>
        <member name="P:WinUtilities.Area.Zero">
            <summary>All components are 0.</summary>
        </member>
        <member name="P:WinUtilities.Area.NaN">
            <summary>All components are NaN.</summary>
        </member>
        <member name="P:WinUtilities.Area.Center">
            <summary>Get or set the center of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.Corners">
            <summary>Returns a list of the corners' Coords in order of [TopLeft, TopRight, BottomLeft, BottomRight]</summary>
        </member>
        <member name="P:WinUtilities.Area.Edges">
            <summary>Returns a list of the edges' center positions in order of [Left, Right, Top, Bottom]</summary>
        </member>
        <member name="P:WinUtilities.Area.Magnitude">
            <summary>A 4D vector-like magnitude</summary>
        </member>
        <member name="P:WinUtilities.Area.TopLeft">
            <summary>Get or set the Top Left corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.TopRight">
            <summary>Get or set the Top Right corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.BottomLeft">
            <summary>Get or set the Bottom Left corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.BottomRight">
            <summary>Get or set the Bottom Right corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.Left">
            <summary>Get or set the Left edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.Right">
            <summary>Get or set the Right edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.Top">
            <summary>Get or set the Top edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.Bottom">
            <summary>Get or set the Bottom edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.TopLeftR">
            <summary>Resize from Top Left corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.TopRightR">
            <summary>Resize from Top Right corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.BottomLeftR">
            <summary>Resize from Bottom Left corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.BottomRightR">
            <summary>Resize from Bottom Right corner of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.LeftR">
            <summary>Resize from Left edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.RightR">
            <summary>Resize from Right edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.TopR">
            <summary>Resize from Top edge of the area.</summary>
        </member>
        <member name="P:WinUtilities.Area.BottomR">
            <summary>Resize from Bottom edge of the area.</summary>
        </member>
        <member name="M:WinUtilities.Area.Slice(System.Double,System.Double,System.Double,System.Double)">
            <summary>Create a copy while modifying the size using percentages</summary>
        </member>
        <member name="M:WinUtilities.Area.Round">
            <summary>Rounds all components to closest integer</summary>
        </member>
        <member name="M:WinUtilities.Area.FillNaN(WinUtilities.Area)">
            <summary>Fills the current NaN values with the new ones</summary>
        </member>
        <member name="M:WinUtilities.Area.GetRelativePoint(System.Double,System.Double)">
            <summary>Gets a point relative to a area's location and size. Formula is roughly [location + size * var].</summary>
            <param name="x">Between 0 and 1. Giving 0 targets the area's left edge and 1 targets the right edge. Giving 0.5 would target the center.</param>
            <param name="y">Between 0 and 1. Giving 0 targets the area's top edge and 1 targets the bottom edge. Giving 0.5 would target the center.</param>
        </member>
        <member name="M:WinUtilities.Area.GetEdge(WinUtilities.EdgeType)">
            <summary>Get the <see cref="T:WinUtilities.Edge"/> of a given <see cref="T:WinUtilities.EdgeType"/></summary>
        </member>
        <member name="M:WinUtilities.Area.ClosestCorner(WinUtilities.Coord)">
            <summary>Returns the <see cref="T:WinUtilities.Edge"/> of the closest corner</summary>
        </member>
        <member name="M:WinUtilities.Area.ClosestCorner(WinUtilities.Coord,System.Double@)">
            <summary>Returns the <see cref="T:WinUtilities.Edge"/> of the closest corner</summary>
        </member>
        <member name="M:WinUtilities.Area.ClosestEdge(WinUtilities.Coord)">
            <summary>Returns the <see cref="T:WinUtilities.Edge"/> of the closest center of an edge</summary>
        </member>
        <member name="M:WinUtilities.Area.ClosestEdge(WinUtilities.Coord,System.Double@)">
            <summary>Returns the <see cref="T:WinUtilities.Edge"/> of the closest center of an edge</summary>
        </member>
        <member name="M:WinUtilities.Area.ClosestCornerOrEdge(WinUtilities.Coord)">
            <summary>Returns the <see cref="T:WinUtilities.Edge"/> of the closest corner or center of an edge</summary>
        </member>
        <member name="M:WinUtilities.Area.ClosestCornerOrEdge(WinUtilities.Coord,System.Double@)">
            <summary>Returns the <see cref="T:WinUtilities.Edge"/> of the closest corner or center of an edge</summary>
        </member>
        <member name="M:WinUtilities.Area.SetEdge(WinUtilities.Edge,System.Boolean,System.Boolean)">
            <summary>Moves the area's edges using dynamic selection.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetEdge(WinUtilities.EdgeType,System.Double,System.Boolean,System.Boolean)">
            <summary>Moves the area's edges using dynamic selection. X and Y are the same.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetEdge(WinUtilities.EdgeType,WinUtilities.Coord,System.Boolean,System.Boolean)">
            <summary>Moves the area's edges using dynamic selection.</summary>
        </member>
        <member name="M:WinUtilities.Area.AddPoint(WinUtilities.Area)">
            <summary>Add another area's point to this area's point.</summary>
        </member>
        <member name="M:WinUtilities.Area.AddPoint(WinUtilities.Coord)">
            <summary>Add to the area's point.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetPoint(WinUtilities.Area)">
            <summary>Set another area's point as this area's point.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetPoint(WinUtilities.Coord)">
            <summary>Set the area's point. Helps with dotting into code.</summary>
        </member>
        <member name="M:WinUtilities.Area.AddSize(WinUtilities.Area)">
            <summary>Add another area's size to this area's size.</summary>
        </member>
        <member name="M:WinUtilities.Area.AddSize(WinUtilities.Coord)">
            <summary>Add to the area's size.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetSize(WinUtilities.Area)">
            <summary>Set another area's size as this area's size.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetSize(WinUtilities.Coord)">
            <summary>Set the area's size. Helps with dotting into code.</summary>
        </member>
        <member name="M:WinUtilities.Area.SetRelative(WinUtilities.Area)">
            <summary>Turns this area relative to the given area</summary>
        </member>
        <member name="M:WinUtilities.Area.Contains(WinUtilities.Coord)">
            <summary>Checks if the given point is within the area.</summary>
        </member>
        <member name="M:WinUtilities.Area.Contains(System.Double,System.Double)">
            <summary>Checks if the given point is within the area.</summary>
        </member>
        <member name="M:WinUtilities.Area.Contains(WinUtilities.Area)">
            <summary>Returns true if the parent fully contains the given position.</summary>
        </member>
        <member name="M:WinUtilities.Area.Overlaps(WinUtilities.Area)">
            <summary>Returns true if the two positions overlap.</summary>
        </member>
        <member name="M:WinUtilities.Area.Touches(WinUtilities.Area)">
            <summary>Returns true if the two positions overlap or their edges touch.</summary>
        </member>
        <member name="M:WinUtilities.Area.Grow(System.Double)">
            <summary>Grows the area outwards by the specified value. Shrinks if negative.</summary>
        </member>
        <member name="M:WinUtilities.Area.ClampWithin(WinUtilities.Area)">
            <summary>Return a new area that is clamped within the clamp area</summary>
        </member>
        <member name="M:WinUtilities.Area.ClampContain(WinUtilities.Area)">
            <summary>Return a new area that has been resized to contain the given area</summary>
        </member>
        <member name="M:WinUtilities.Area.Clamp(WinUtilities.Area,WinUtilities.Area)">
            <summary>Return a new area whose values have been restricted between the given areas</summary>
        </member>
        <member name="M:WinUtilities.Area.ClampLinear(WinUtilities.Area,WinUtilities.Area)">
            <summary>Return a new area that has been clamped linearly between the given areas</summary>
        </member>
        <member name="M:WinUtilities.Area.Mutual(WinUtilities.Area,WinUtilities.Area)">
            <summary>Takes the mutual area between two areas.</summary>
        </member>
        <member name="M:WinUtilities.Area.Lerp(WinUtilities.Area,System.Double)">
            <summary>Lerp to target area</summary>
        </member>
        <member name="M:WinUtilities.Area.Lerp(WinUtilities.Area,WinUtilities.Area,System.Double)">
            <summary>Lerp between two areas</summary>
        </member>
        <member name="T:WinUtilities.Coord">
            <summary>
            Has coordinate (point), vector and rectangle (size) properties.
            A hybrid of those.
            </summary>
        </member>
        <member name="P:WinUtilities.Coord.X">
            <summary>X value of the coordinate</summary>
        </member>
        <member name="P:WinUtilities.Coord.Y">
            <summary>Y value of the coordinate</summary>
        </member>
        <member name="P:WinUtilities.Coord.IntX">
            <summary>X value of the coordinate as an int</summary>
        </member>
        <member name="P:WinUtilities.Coord.IntY">
            <summary>Y value of the coordinate as an int</summary>
        </member>
        <member name="P:WinUtilities.Coord.Zero">
            <summary>All components are 0.</summary>
        </member>
        <member name="P:WinUtilities.Coord.NaN">
            <summary>All components are NaN.</summary>
        </member>
        <member name="P:WinUtilities.Coord.IsValid">
            <summary>Check if all the components are not NaN.</summary>
        </member>
        <member name="P:WinUtilities.Coord.IsNaN">
            <summary>Check if all the components are NaN.</summary>
        </member>
        <member name="P:WinUtilities.Coord.AsValue">
            <summary>Gives the current Coord as a single integer.</summary>
        </member>
        <member name="P:WinUtilities.Coord.Magnitude">
            <summary>
            Point's distance from origin. Naming comes from vectors.
            </summary>
        </member>
        <member name="P:WinUtilities.Coord.Normalized">
            <summary>Gets a copy whose distance to the origin is set to 1</summary>
        </member>
        <member name="P:WinUtilities.Coord.SurfaceArea">
            <summary>Gets the surface area of the area object</summary>
        </member>
        <member name="M:WinUtilities.Coord.FromInt(System.Int32)">
            <summary>Get coordinate from an int where the first 16 bits are the x value and the last 16 are the y value</summary>
        </member>
        <member name="M:WinUtilities.Coord.Fill(WinUtilities.Coord)">
            <summary>Fills the current Coord's NaN values with the other one.</summary>
            <returns>A copy of itself.</returns>
        </member>
        <member name="M:WinUtilities.Coord.Round">
            <summary>Rounds all components to closest integer.</summary>
            <returns>A copy of itself.</returns>
        </member>
        <member name="M:WinUtilities.Coord.SetRelative(System.Double,System.Double)">
            <summary>Turns these coordinates relative to the given coordinates</summary>
        </member>
        <member name="M:WinUtilities.Coord.SetRelative(WinUtilities.Coord)">
            <summary>Turns these coordinates relative to the given coordinates</summary>
        </member>
        <member name="M:WinUtilities.Coord.SetRelative(WinUtilities.Area)">
            <summary>Turns these coordinates relative to the given coordinates</summary>
        </member>
        <member name="M:WinUtilities.Coord.Distance(System.Double,System.Double)">
            <summary>Distance to the given point.</summary>
        </member>
        <member name="M:WinUtilities.Coord.Distance(WinUtilities.Coord)">
            <summary>Distance to the given point.</summary>
        </member>
        <member name="M:WinUtilities.Coord.SqDistance(System.Double,System.Double)">
            <summary>Returns the square distance to the point, so Max(dx, dy).</summary>
        </member>
        <member name="M:WinUtilities.Coord.SqDistance(WinUtilities.Coord)">
            <summary>Returns the square distance to the point, so Max(dx, dy).</summary>
        </member>
        <member name="M:WinUtilities.Coord.Rotate(System.Double)">
            <summary>Rotate as a vector.</summary>
        </member>
        <member name="M:WinUtilities.Coord.Clamp(WinUtilities.Area)">
            <summary>Clamp this point inside the specified area</summary>
        </member>
        <member name="M:WinUtilities.Coord.ClampLinear(WinUtilities.Coord,WinUtilities.Coord)">
            <summary>Clamp this point to a line between the given points</summary>
        </member>
        <member name="M:WinUtilities.Coord.Lerp(WinUtilities.Coord,System.Double)">
            <summary>Lerp to the target coordinate</summary>
        </member>
        <member name="M:WinUtilities.Coord.Lerp(WinUtilities.Coord,WinUtilities.Coord,System.Double)">
            <summary>Lerp between two coordinates</summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.AUDCLNT_SESSIONFLAGS_XXX">
            <summary>
            Indicate characteristics of an audio session associated with the stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370789.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_SESSIONFLAGS_XXX.AUDCLNT_SESSIONFLAGS_EXPIREWHENUNOWNED">
            <summary>
            The session expires when there are no associated streams and owning session control objects holding references.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_SESSIONFLAGS_XXX.AUDCLNT_SESSIONFLAGS_DISPLAY_HIDE">
            <summary>
            The volume control is hidden in the volume mixer user interface when the audio session is created.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_SESSIONFLAGS_XXX.AUDCLNT_SESSIONFLAGS_DISPLAY_HIDEWHENEXPIRED">
            <summary>
            The volume control is hidden in the volume mixer user interface after the session expires.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX">
            <summary>
            Indicate special characteristics that a client can assign to an audio stream during the initialization of the stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370791.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX.AUDCLNT_STREAMFLAGS_CROSSPROCESS">
            <summary>
            The audio stream will be a member of a cross-process audio session.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX.AUDCLNT_STREAMFLAGS_LOOPBACK">
            <summary>
            The audio stream will operate in loopback mode.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX.AUDCLNT_STREAMFLAGS_EVENTCALLBACK">
            <summary>
            Processing of the audio buffer by the client will be event driven.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX.AUDCLNT_STREAMFLAGS_NOPERSIST">
            <summary>
            The volume and mute settings for an audio session will not persist across system restarts.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX.AUDCLNT_STREAMFLAGS_RATEADJUST">
            <summary>
            The sample rate of the stream is adjusted to a rate specified by an application.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.ComCLSIDs">
            <summary>
            Defines all COM CLSIDs applicable to CoreAudio API.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.ComIIDs">
            <summary>
            Defines all COM IIDs applicable to CoreAudio API.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX">
            <summary>
            Indicate the current state of an audio endpoint device. 
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370823.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX.DEVICE_STATE_ACTIVE">
            <summary>
            The audio endpoint device is active.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX.DEVICE_STATE_DISABLED">
            <summary>
            The audio endpoint device is disabled.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX.DEVICE_STATE_NOTPRESENT">
            <summary>
            The audio endpoint device is not present because the audio adapter that connects to the endpoint device has been removed or disabled.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX.DEVICE_STATE_UNPLUGGED">
            <summary>
            The audio endpoint device is unplugged.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX.DEVICE_STATEMASK_ALL">
            <summary>
            Includes audio endpoint devices in all states.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.ENDPOINT_HARDWARE_SUPPORT_XXX">
            <summary>
            Hardware support flags for an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370835.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.ENDPOINT_HARDWARE_SUPPORT_XXX.ENDPOINT_HARDWARE_SUPPORT_VOLUME">
            <summary>
            The audio endpoint device supports a hardware volume control.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.ENDPOINT_HARDWARE_SUPPORT_XXX.ENDPOINT_HARDWARE_SUPPORT_MUTE">
            <summary>
            The audio endpoint device supports a hardware mute control.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.ENDPOINT_HARDWARE_SUPPORT_XXX.ENDPOINT_HARDWARE_SUPPORT_METER">
            <summary>
            The audio endpoint device supports a hardware peak meter.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Constants.PropertyKeys">
            <summary>
            Defines all applicable property keys for CoreAudio API.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_FormFactor">
            <summary>
            Indicates the physical attributes of the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_ControlPanelPageProvider">
            <summary>
            Specifies the CLSID of the registered provider of the device-properties extension for the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_Association">
            <summary>
            Associates a kernel-streaming (KS) pin category with an audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_PhysicalSpeakers">
            <summary>
            Defines the physical speaker configuration for the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_GUID">
            <summary>
            Supplies the DirectSound device identifier that corresponds to the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_Disable_SysFx">
            <summary>
            Specifies whether system effects are enabled in the shared-mode stream that flows to or from the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_FullRangeSpeakers">
            <summary>
            Specifies the channel-configuration mask for the full-range speakers that are connected to the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_Supports_EventDriven_Mode">
            <summary>
            Indicates whether the endpoint supports the event-driven mode.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEndpoint_JackSubType">
            <summary>
            Contains an output category GUID for an audio endpoint device. 
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEngine_DeviceFormat">
            <summary>
            Specifies the device format, which is the format that the audio engine uses for the shared-mode stream that flows to or from the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_AudioEngine_OEMFormat">
            <summary>
            Specifies the default format of the device that is used for rendering or capturing a stream.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Constants.PropertyKeys.PKEY_DeviceInterface_FriendlyName">
            <summary>
            Contains the friendly name of the endpoint device.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.AUDCLNT_BUFFERFLAGS">
            <summary>
            Defines flags that indicate the status of an audio endpoint buffer.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371458.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AUDCLNT_BUFFERFLAGS.AUDCLNT_BUFFERFLAGS_DATA_DISCONTINUITY">
            <summary>
            The data in the packet is not correlated with the previous packet's device position.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AUDCLNT_BUFFERFLAGS.AUDCLNT_BUFFERFLAGS_SILENT">
            <summary>
            Treat all of the data in the packet as silence and ignore the actual data values.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AUDCLNT_BUFFERFLAGS.AUDCLNT_BUFFERFLAGS_TIMESTAMP_ERROR">
            <summary>
            The time at which the device's stream position was recorded is uncertain.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.AUDCLNT_SHAREMODE">
            <summary>
            Defines constants that indicate whether an audio stream will run in shared mode or in exclusive mode.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370790.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AUDCLNT_SHAREMODE.AUDCLNT_SHAREMODE_SHARED">
            <summary>
            The audio stream will run in shared mode.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AUDCLNT_SHAREMODE.AUDCLNT_SHAREMODE_EXCLUSIVE">
            <summary>
            The audio stream will run in exclusive mode.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason">
            <summary>
            Defines constants that indicate a reason for an audio session being disconnected.
            </summary>
            <remarks>
            MSDN Reference: Unknown
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason.DisconnectReasonDeviceRemoval">
            <summary>
            The user removed the audio endpoint device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason.DisconnectReasonServerShutdown">
            <summary>
            The Windows audio service has stopped.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason.DisconnectReasonFormatChanged">
            <summary>
            The stream format changed for the device that the audio session is connected to.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason.DisconnectReasonSessionLogoff">
            <summary>
            The user logged off the WTS session that the audio session was running in.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason.DisconnectReasonSessionDisconnected">
            <summary>
            The WTS session that the audio session was running in was disconnected.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason.DisconnectReasonExclusiveModeOverride">
            <summary>
            The (shared-mode) audio session was disconnected to make the audio endpoint device available for an exclusive-mode connection.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.AudioSessionState">
            <summary>
            Defines constants that indicate the current state of an audio session.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370792.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionState.AudioSessionStateInactive">
            <summary>
            The audio session is inactive.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionState.AudioSessionStateActive">
            <summary>
            The audio session is active.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.AudioSessionState.AudioSessionStateExpired">
            <summary>
            The audio session has expired.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.ConnectorType">
            <summary>
            Indicates the type of connection that a connector is part of.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370801.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ConnectorType.Unknown_Connector">
            <summary>
            The connector is part of a connection of unknown type.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ConnectorType.Physical_Internal">
            <summary>
            The connector is part of a physical connection to an auxiliary device that is installed inside the system chassis.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ConnectorType.Physical_External">
            <summary>
            The connector is part of a physical connection to an external device.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ConnectorType.Software_IO">
            <summary>
            The connector is part of a software-configured I/O connection.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ConnectorType.Software_Fixed">
            <summary>
            The connector is part of a permanent connection that is fixed and cannot be configured under software control.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ConnectorType.Network">
            <summary>
            The connector is part of a connection to a network.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.DataFlow">
            <summary>
            Indicates the data-flow direction of an audio stream through a connector.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370808.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.DataFlow.In">
            <summary>
            The audio stream flows into the device through the connector.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.DataFlow.Out">
            <summary>
            The audio stream flows out of the device through the connector.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.EDataFlow">
            <summary>
            Defines constants that indicate the direction in which audio data flows between an audio endpoint device and an application.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370828.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EDataFlow.eRender">
            <summary>
            Audio data flows from the application to the audio endpoint device, which renders the stream.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EDataFlow.eCapture">
            <summary>
            Audio data flows from the audio endpoint device that captures the stream, to the application.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EDataFlow.eAll">
            <summary>
            Audio data can flow either from the application to the audio endpoint device, or from the audio endpoint device to the application.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor">
            <summary>
            Defines constants that indicate the general physical attributes of an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370830.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.RemoteNetworkDevice">
            <summary>
            An audio endpoint device that the user accesses remotely through a network.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.Speakers">
            <summary>
            A set of speakers.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.LineLevel">
            <summary>
            An audio endpoint device that sends or receives a line-level a line-level analog signal.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.Headphones">
            <summary>
            A set of headphones.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.Microphone">
            <summary>
            A microphone.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.Headset">
            <summary>
            An earphone or a pair of earphones with an attached mouthpiece for two-way communication.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.Handset">
            <summary>
            The part of a telephone that is held in the hand and that contains a speaker and a microphone for two-way communication.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.UnknownDigitalPassthrough">
            <summary>
            An audio endpoint device that connects to an audio adapter through a connector for a digital interface of unknown type.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.SPDIF">
            <summary>
            An audio endpoint device that connects to an audio adapter through a Sony/Philips Digital Interface (S/PDIF) connector.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.DigitalAudioDisplayDevice">
            <summary>
            An audio endpoint device that connects to an audio adapter through a High-Definition Multimedia Interface (HDMI) connector.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.EndpointFormFactor.UnknownFormFactor">
            <summary>
            An audio endpoint device with unknown physical attributes.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.ERole">
            <summary>
            Defines constants that indicate the role that the system has assigned to an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370842.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ERole.eConsole">
            <summary>
            Games, system notification sounds, and voice commands.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ERole.eMultimedia">
            <summary>
            Music, movies, narration, and live music recording.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.ERole.eCommunications">
            <summary>
            Voice communications (talking to another person).
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.KSJACK_SINK_CONNECTIONTYPE">
            <summary>
            Defines constants that specify the type of connection.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316547.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.KSJACK_SINK_CONNECTIONTYPE.KSJACK_SINK_CONNECTIONTYPE_HDMI">
            <summary>
            High-Definition Multimedia Interface (HDMI) connection.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.KSJACK_SINK_CONNECTIONTYPE.KSJACK_SINK_CONNECTIONTYPE_DISPLAYPORT">
            <summary>
            Display port.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Enumerations.PartType">
            <summary>
            Defines constants that indicate whether a part in a device topology is a connector or subunit.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316559.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.PartType.Connector">
            <summary>
            The part is a connector.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Enumerations.PartType.Subunit">
            <summary>
            The part is a subunit.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Externals.CLSCTX">
            <summary>
            Values that are used in activation calls to indicate the execution contexts in which an object is to be run.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/ms693716.aspx
            Note: This item is external to CoreAudio API, and is defined in the Windows COM API.
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_INPROC_SERVER">
            <summary>
            The code that creates and manages objects of this class is a DLL that runs in the same process as the caller of the function specifying the class context.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_INPROC_HANDLER">
            <summary>
            The code that manages objects of this class is an in-process handler.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_LOCAL_SERVER">
            <summary>
            The EXE code that creates and manages objects of this class runs on same machine but is loaded in a separate process space.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_INPROC_SERVER16">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_REMOTE_SERVER">
            <summary>
            A remote context.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_INPROC_HANDLER16">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_RESERVED1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_RESERVED2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_RESERVED3">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_RESERVED4">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_NO_CODE_DOWNLOAD">
            <summary>
            Disaables the downloading of code from the directory service or the Internet.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_RESERVED5">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_NO_CUSTOM_MARSHAL">
            <summary>
            Specify if you want the activation to fail if it uses custom marshalling.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_ENABLE_CODE_DOWNLOAD">
            <summary>
            Enables the downloading of code from the directory service or the Internet.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_NO_FAILURE_LOG">
            <summary>
            Can be used to override the logging of failures
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_DISABLE_AAA">
            <summary>
            Disables activate-as-activator (AAA) activations for this activation only.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_ENABLE_AAA">
            <summary>
            Enables activate-as-activator (AAA) activations for this activation only.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_FROM_DEFAULT_CONTEXT">
            <summary>
            Begin this activation from the default context of the current apartment.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_ACTIVATE_32_BIT_SERVER">
            <summary>
            Activate or connect to a 32-bit version of the server; fail if one is not registered.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_ACTIVATE_64_BIT_SERVER">
            <summary>
            Activate or connect to a 64 bit version of the server; fail if one is not registered. 
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_ENABLE_CLOAKING">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.CLSCTX.CLSCTX_PS_DLL">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Externals.IPropertyStore">
            <summary>
            Exposes methods for enumerating, getting, and setting property values.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/bb761474.aspx
            Note: This item is external to CoreAudio API, and is defined in the Windows Property System API.
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Externals.IPropertyStore.GetCount(System.UInt32@)">
            <summary>
            Gets the number of properties attached to the file.
            </summary>
            <param name="propertyCount">Receives the property count.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Externals.IPropertyStore.GetAt(System.UInt32,WinUtilities.CoreAudio.Externals.PROPERTYKEY@)">
            <summary>
            Gets a property key from an item's array of properties.
            </summary>
            <param name="propertyIndex">The index of the property key in the array of <see cref="T:WinUtilities.CoreAudio.Externals.PROPERTYKEY"/> structures.</param>
            <param name="propertyKey">The unique identifier for a property.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Externals.IPropertyStore.GetValue(WinUtilities.CoreAudio.Externals.PROPERTYKEY@,WinUtilities.CoreAudio.Externals.PROPVARIANT@)">
            <summary>
            Gets data for a specific property.
            </summary>
            <param name="propertyKey">A <see cref="T:WinUtilities.CoreAudio.Externals.PROPERTYKEY"/> structure containing a unique identifier for the property in question.</param>
            <param name="value">Receives a <see cref="T:WinUtilities.CoreAudio.Externals.PROPVARIANT"/> structure that contains the property data.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Externals.IPropertyStore.SetValue(WinUtilities.CoreAudio.Externals.PROPERTYKEY@,WinUtilities.CoreAudio.Externals.PROPVARIANT@)">
            <summary>
            Sets a new property value, or replaces or removes an existing value.
            </summary>
            <param name="propertyKey">A <see cref="T:WinUtilities.CoreAudio.Externals.PROPERTYKEY"/> structure containing a unique identifier for the property in question.</param>
            <param name="value">A <see cref="T:WinUtilities.CoreAudio.Externals.PROPVARIANT"/> structure that contains the new property data.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Externals.IPropertyStore.Commit">
            <summary>
            Saves a property change.
            </summary>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Externals.PROPERTYKEY">
            <summary>
            Specifies the FMTID/PID identifier that programmatically identifies a property.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/bb773381.aspx
            Note: This item is external to CoreAudio API, and is defined in the Windows Property System API.
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPERTYKEY.fmtid">
            <summary>
            A unique GUID for the property.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPERTYKEY.pid">
            <summary>
            A property identifier (PID).
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Externals.PROPVARIANT">
            <summary>
            Used by the <see cref="M:WinUtilities.CoreAudio.Externals.IPropertyStore.GetValue(WinUtilities.CoreAudio.Externals.PROPERTYKEY@,WinUtilities.CoreAudio.Externals.PROPVARIANT@)"/> and <see cref="M:WinUtilities.CoreAudio.Externals.IPropertyStore.SetValue(WinUtilities.CoreAudio.Externals.PROPERTYKEY@,WinUtilities.CoreAudio.Externals.PROPVARIANT@)"/> methods
            of <see cref="T:WinUtilities.CoreAudio.Externals.IPropertyStore"/> as the primary way to program item properties.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/aa380072.aspx
            Note: This item is external to CoreAudio API, and is defined in the Windows Structured Storage API.
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPVARIANT.vt">
            <summary>
            Value type tag.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPVARIANT.wReserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPVARIANT.wReserved2">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPVARIANT.wReserved3">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.PROPVARIANT.Data">
            <summary>
            Represents the variant data section.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Externals.VariantData">
            <summary>
            Represents the variant data section of the PROPVARIANT structure.
            </summary>
            <remarks>
            This only provides variants for use within the context of MMDevice properties.
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.VariantData.AsBoolean">
            <summary>
            Represents the data as a boolean value.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.VariantData.AsUInt32">
            <summary>
            Represents the data as a unsigned 32-bit integer.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.VariantData.AsStringPtr">
            <summary>
            Represents the data as a unicode string pointer.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.VariantData.AsFormatPtr">
            <summary>
            Represents the data as a pointer to a WAVEFORMATEX structure.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Externals.STGM">
            <summary>
            The STGM constants are flags that indicate conditions for creating and deleting the object and access modes for the object.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/aa380337.aspx
            Note: This item is external to CoreAudio API, and is defined in the Windows Structured Storage API.
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.STGM.STGM_READ">
            <summary>
            Indicates that the object is read-only, meaning that modifications cannot be made.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.STGM.STGM_WRITE">
            <summary>
            Enables you to save changes to the object, but does not permit access to its data.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Externals.STGM.STGM_READWRITE">
            <summary>
            Enables access and modification of object data.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IMMDevice">
            <summary>
            Represents an audio device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371395.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDevice.Activate(System.Guid,System.UInt32,System.IntPtr,System.Object@)">
            <summary>
            Creates a COM object with the specified interface.
            </summary>
            <param name="interfaceId">The interface identifier.</param>
            <param name="classContext">The execution context, defined by the COM CLSCTX enumeration.</param>
            <param name="activationParams">Set to NULL to activate Core Audio APIs.</param>
            <param name="instancePtr">The address of the interface instance specified by parameter IID.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDevice.OpenPropertyStore(System.UInt32,WinUtilities.CoreAudio.Externals.IPropertyStore@)">
            <summary>
            Gets an interface to the device's property store.
            </summary>
            <param name="accessMode">The <see cref="T:WinUtilities.CoreAudio.Externals.STGM"/> constant that indicates the storage mode.</param>
            <param name="properties">The device's property store.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
            <remarks>
            Note that a client which is not running as administrator is restricted to read-only access.
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDevice.GetId(System.String@)">
            <summary>
            Retrieves an endpoint ID string that identifies the audio endpoint device.
            </summary>
            <param name="strId">The endpoint device ID.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDevice.GetState(System.UInt32@)">
            <summary>
            Gets the current state of the device.
            </summary>
            <param name="deviceState">The <see cref="T:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX"/> constant that indicates the current state.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator">
            <summary>
            Provides methods for enumerating audio devices.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371399.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator.EnumAudioEndpoints(WinUtilities.CoreAudio.Enumerations.EDataFlow,System.UInt32,WinUtilities.CoreAudio.Interfaces.IMMDeviceCollection@)">
            <summary>
            Generates a collection of audio endpoint devices that meet the specified criteria.
            </summary>
            <param name="dataFlow">The <see cref="T:WinUtilities.CoreAudio.Enumerations.EDataFlow"/> direction for the endpoint devices in the collection.</param>
            <param name="stateMask">One or more <see cref="T:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX"/> constants that indicate the state of the endpoints in the collection.</param>
            <param name="devices">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IMMDeviceCollection"/> interface of the device-collection object.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator.GetDefaultAudioEndpoint(WinUtilities.CoreAudio.Enumerations.EDataFlow,WinUtilities.CoreAudio.Enumerations.ERole,WinUtilities.CoreAudio.Interfaces.IMMDevice@)">
            <summary>
            Retrieves the default audio endpoint for the specified data-flow direction and role.
            </summary>
            <param name="dataFlow">The <see cref="T:WinUtilities.CoreAudio.Enumerations.EDataFlow"/> direction for the endpoint device.</param>
            <param name="role">The <see cref="T:WinUtilities.CoreAudio.Enumerations.ERole"/> of the endpoint device.</param>
            <param name="device">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IMMDevice"/> interface of the default audio endpoint device.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator.GetDevice(System.String,WinUtilities.CoreAudio.Interfaces.IMMDevice@)">
            <summary>
            Retrieves an endpoint device that is specified by an endpoint device-identification string.
            </summary>
            <param name="endpointId">The endpoint ID.</param>
            <param name="device">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IMMDevice"/> interface for the specified device.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator.RegisterEndpointNotificationCallback(WinUtilities.CoreAudio.Interfaces.IMMNotificationClient)">
            <summary>
            Registers a client's notification callback interface.
            </summary>
            <param name="client">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient"/> interface that the client is registering for notification callbacks.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator.UnregisterEndpointNotificationCallback(WinUtilities.CoreAudio.Interfaces.IMMNotificationClient)">
            <summary>
            Deletes the registration of a notification interface that the client registered in a previous call
            to the <see cref="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceEnumerator.RegisterEndpointNotificationCallback(WinUtilities.CoreAudio.Interfaces.IMMNotificationClient)"/> method.
            </summary>
            <param name="client">A <see cref="T:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient"/> interface that was previously registered for notification callbacks.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IMMDeviceCollection">
            <summary>
            Represents a collection of audio devices.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371396.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceCollection.GetCount(System.UInt32@)">
            <summary>
            Retrieves a count of the devices in the device collection.
            </summary>
            <param name="count">The number of devices in the device collection.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMDeviceCollection.Item(System.UInt32,WinUtilities.CoreAudio.Interfaces.IMMDevice@)">
            <summary>
            Retrieves a pointer to the specified item in the device collection.
            </summary>
            <param name="index">The zero based device index.</param>
            <param name="device">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IMMDevice"/> interface of the specified item in the device collection.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IMMEndpoint">
            <summary>
            Represents an audio endpoint device.
            </summary>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMEndpoint.GetDataFlow(WinUtilities.CoreAudio.Enumerations.EDataFlow@)">
            <summary>
            Indicates whether the endpoint is associated with a rendering device or a capture device.
            </summary>
            <param name="dataFlow">The data-flow direction of the endpoint device.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient">
            <summary>
            Provides notifications when an audio endpoint device is added or removed, when the state
            or properties of a device change, or when there is a change in the default role assigned to a device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371417.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient.OnDeviceStateChanged(System.String,System.UInt32)">
            <summary>
            Notifies the client that the default audio endpoint device for a particular role has changed.
            </summary>
            <param name="deviceId">The endpoint ID string that identifies the audio endpoint device.</param>
            <param name="newState">The <see cref="T:WinUtilities.CoreAudio.Constants.DEVICE_STATE_XXX"/> constant that indicates the new state.</param>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient.OnDeviceAdded(System.String)">
            <summary>
            Indicates that a new audio endpoint device has been added.
            </summary>
            <param name="deviceId">The endpoint ID string that identifies the audio endpoint device.</param>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient.OnDeviceRemoved(System.String)">
            <summary>
            Indicates that an audio endpoint device has been removed.
            </summary>
            <param name="deviceId">The endpoint ID string that identifies the audio endpoint device.</param>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient.OnDefaultDeviceChanged(WinUtilities.CoreAudio.Enumerations.EDataFlow,WinUtilities.CoreAudio.Enumerations.ERole,System.String)">
            <summary>
            Notifies the client that the default audio endpoint device for a particular role has changed.
            </summary>
            <param name="dataFlow">The data-flow direction of the endpoint device.</param>
            <param name="deviceRole">The device role of the audio endpoint device.</param>
            <param name="defaultDeviceId">The endpoint ID string that identifies the audio endpoint device.</param>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IMMNotificationClient.OnPropertyValueChanged(System.String,WinUtilities.CoreAudio.Externals.PROPERTYKEY)">
            <summary>
            Indicates that the value of a property belonging to an audio endpoint device has changed.
            </summary>
            <param name="deviceId">The endpoint ID string that identifies the audio endpoint device.</param>
            <param name="propertyKey">A <see cref="T:WinUtilities.CoreAudio.Externals.PROPERTYKEY"/> that specifies the type of property.</param>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioCaptureClient">
            <summary>
            Enables a client to read input data from a capture endpoint buffer.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370858.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioCaptureClient.GetBuffer(System.IntPtr@,System.UInt32@,WinUtilities.CoreAudio.Enumerations.AUDCLNT_BUFFERFLAGS@,System.UInt64@,System.UInt64@)">
            <summary>
            Retrieves a pointer to the next available packet of data in the capture endpoint buffer.
            </summary>
            <param name="dataPointer">Receives the starting address of a byte array containing the next data packet that is available for the client to read.</param>
            <param name="frameCount">Receives the number of audio frames available in the data packet</param>
            <param name="bufferStatus">Receives the buffer-status flags.</param>
            <param name="devicePosition">Receives the device position of the first audio frame in the data packet.</param>
            <param name="counterPosition">
            Receives the value of the performance counter at the time that the audio endpoint
            device recorded the device position of the first audio frame in the data packet.
            </param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioCaptureClient.ReleaseBuffer(System.UInt32)">
            <summary>
            Releases a buffer.
            </summary>
            <param name="numFramesRead">The number of audio frames that the client read from the capture buffer.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioCaptureClient.GetNextPacketSize(System.UInt32@)">
            <summary>
            Retrieves the number of frames in the next data packet in the capture endpoint buffer.
            </summary>
            <param name="frameCount">Receives the number of audio frames in the next capture packet.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioClient">
            <summary>
            Enables a client to create and initialize an audio stream between an audio application and the
            audio engine (for a shared-mode stream) or the hardware buffer (for an exclusive-mode stream).
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370865.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.Initialize(WinUtilities.CoreAudio.Enumerations.AUDCLNT_SHAREMODE,System.UInt32,System.UInt64,System.UInt64,System.IntPtr,System.Guid)">
            <summary>
            Initializes the audio stream.
            </summary>
            <param name="shareMode">The sharing mode for the connection.</param>
            <param name="streamFlags">One or more <see cref="T:WinUtilities.CoreAudio.Constants.AUDCLNT_STREAMFLAGS_XXX"/> flags to control creation of the stream.</param>
            <param name="bufferDuration">The buffer capacity as a time value.</param>
            <param name="devicePeriod">
            In exclusive mode, this parameter specifies the requested scheduling period for successive
            buffer accesses by the audio endpoint device. In shared mode, it should always be set to zero.
            </param>
            <param name="format">The format descriptor.</param>
            <param name="audioSessionId">The ID of the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.GetBufferSize(System.UInt32@)">
            <summary>
            Retrieves the size (maximum capacity) of the audio buffer associated with the endpoint.
            </summary>
            <param name="size">Receives the number of audio frames that the buffer can hold.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.GetStreamLatency(System.UInt64@)">
            <summary>
            Retrieves the maximum latency for the current stream and can be called any time after the stream has been initialized.
            </summary>
            <param name="latency">Receives a time value representing the latency.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.GetCurrentPadding(System.UInt32@)">
            <summary>
            Retrieves the number of frames of padding in the endpoint buffer.
            </summary>
            <param name="frameCount">Receives the number of audio frames of padding in the buffer.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.IsFormatSupported(WinUtilities.CoreAudio.Enumerations.AUDCLNT_SHAREMODE,System.IntPtr,System.IntPtr@)">
            <summary>
            Indicates whether the audio endpoint device supports a particular stream format.
            </summary>
            <param name="shareMode">The sharing mode for the stream format.</param>
            <param name="format">The specified stream format.</param>
            <param name="closestMatch">The supported format that is closest to the format specified in the format parameter.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.GetMixFormat(System.IntPtr@)">
            <summary>
            Retrieves the stream format that the audio engine uses for its internal processing of shared-mode streams.
            </summary>
            <param name="format">Receives the address of the mix format.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.GetDevicePeriod(System.UInt64@,System.UInt64@)">
            <summary>
            Retrieves the length of the periodic interval separating successive processing passes by the audio engine on the data in the endpoint buffer.
            </summary>
            <param name="processInterval">Receives a time value specifying the default interval between processing passes by the audio engine.</param>
            <param name="minimumInterval">Receives a time value specifying the minimum interval between processing passes by the audio endpoint device.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.Start">
            <summary>
            Starts the audio stream.
            </summary>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.Stop">
            <summary>
            Stops the audio stream.
            </summary>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.Reset">
            <summary>
            Resets the audio stream.
            </summary>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.SetEventHandle(System.IntPtr)">
            <summary>
            Sets the event handle that the audio engine will signal each time a buffer becomes ready to be processed by the client.
            </summary>
            <param name="handle">The event handle.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClient.GetService(System.Guid,System.Object@)">
            <summary>
            Accesses additional services from the audio client object.
            </summary>
            <param name="interfaceId">The interface ID for the requested service.</param>
            <param name="instancePtr">Receives the address of an instance of the requested interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioClock">
            <summary>
            Enables a client to monitor a stream's data rate and the current position in the stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370881.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClock.GetFrequency(System.UInt64@)">
            <summary>
            Gets the device frequency.
            </summary>
            <param name="frequency">Receives the device frequency.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClock.GetPosition(System.UInt64@,System.UInt64@)">
            <summary>
            Gets the current position in the stream.
            </summary>
            <param name="devicePosition">Receives the device position.</param>
            <param name="counterPosition">Receives the value of the performance counter at the time that the device read the position.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClock.GetCharacteristics(System.UInt32@)">
            <summary>
            Reserved for future use.
            </summary>
            <param name="characteristics">Receives a value that indicates the characteristics of the audio clock.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioClock2">
            <summary>
            Used to get the current device position.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370882.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClock2.GetDevicePosition(System.UInt64@,System.UInt64@)">
            <summary>
            Gets the current device position, in frames, directly from the hardware.
            </summary>
            <param name="devicePosition">Receives the device position, in frames.</param>
            <param name="counterPosition">Receives the value of the performance counter at the time that the device read the position.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioClockAdjustment">
            <summary>
            Used to adjust the sample rate of a stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370884.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioClockAdjustment.SetSampleRate(System.Single)">
            <summary>
            Sets the sample rate of a stream.
            </summary>
            <param name="sampleRate">The new sample rate in frames per second.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioRenderClient">
            <summary>
            Enables a client to write output data to a rendering endpoint buffer.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368242.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioRenderClient.GetBuffer(System.UInt32,System.IntPtr@)">
            <summary>
            Retrieves a pointer to the next available space in the rendering endpoint buffer.
            </summary>
            <param name="frameCount">The number of audio frames in the data packet that the caller plans to write to the requested space in the buffer.</param>
            <param name="dataPointer">Receives the starting address of the buffer area into which the caller will write the data packet.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioRenderClient.ReleaseBuffer(System.UInt32,System.UInt32)">
            <summary>
            Releases the buffer space acquired in the previous call to the <see cref="M:WinUtilities.CoreAudio.Interfaces.IAudioRenderClient.GetBuffer(System.UInt32,System.IntPtr@)"/> method.
            </summary>
            <param name="frameCount">The number of audio frames written by the client to the data packet.</param>
            <param name="bufferFlag">The buffer-configuration flags. This should be either zero or <see cref="F:WinUtilities.CoreAudio.Enumerations.AUDCLNT_BUFFERFLAGS.AUDCLNT_BUFFERFLAGS_SILENT"/></param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl">
            <summary>
            Enables a client to configure the control parameters for an audio session and to monitor events in the session.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368246.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.GetState(WinUtilities.CoreAudio.Enumerations.AudioSessionState@)">
            <summary>
            Retrieves the current state of the audio session.
            </summary>
            <param name="state">Receives the current session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name for the audio session.
            </summary>
            <param name="displayName">Receives a string that contains the display name.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.SetDisplayName(System.String,System.Guid)">
            <summary>
            Assigns a display name to the current audio session.
            </summary>
            <param name="displayName">A string that contains the new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.GetIconPath(System.String@)">
            <summary>
            Retrieves the path for the display icon for the audio session.
            </summary>
            <param name="iconPath">Receives a string that specifies the fully qualified path of the file that contains the icon.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.SetIconPath(System.String,System.Guid)">
            <summary>
            Assigns a display icon to the current session.
            </summary>
            <param name="iconPath">A string that specifies the fully qualified path of the file that contains the new icon.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.GetGroupingParam(System.Guid@)">
            <summary>
            Retrieves the grouping parameter of the audio session.
            </summary>
            <param name="groupingId">Receives the grouping parameter ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.SetGroupingParam(System.Guid,System.Guid)">
            <summary>
            Assigns a session to a grouping of sessions.
            </summary>
            <param name="groupingId">The new grouping parameter ID.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.RegisterAudioSessionNotification(WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents)">
            <summary>
            Registers the client to receive notifications of session events, including changes in the session state.
            </summary>
            <param name="client">A client-implemented <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl.UnregisterAudioSessionNotification(WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents)">
            <summary>
            Deletes a previous registration by the client to receive notifications.
            </summary>
            <param name="client">A client-implemented <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2">
            <summary>
            Used by a client to get information about the audio session.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368248.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetState(WinUtilities.CoreAudio.Enumerations.AudioSessionState@)">
            <summary>
            Retrieves the current state of the audio session.
            </summary>
            <param name="state">Receives the current session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetDisplayName(System.String@)">
            <summary>
            Retrieves the display name for the audio session.
            </summary>
            <param name="displayName">Receives a string that contains the display name.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.SetDisplayName(System.String,System.Guid)">
            <summary>
            Assigns a display name to the current audio session.
            </summary>
            <param name="displayName">A string that contains the new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetIconPath(System.String@)">
            <summary>
            Retrieves the path for the display icon for the audio session.
            </summary>
            <param name="iconPath">Receives a string that specifies the fully qualified path of the file that contains the icon.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.SetIconPath(System.String,System.Guid)">
            <summary>
            Assigns a display icon to the current session.
            </summary>
            <param name="iconPath">A string that specifies the fully qualified path of the file that contains the new icon.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetGroupingParam(System.Guid@)">
            <summary>
            Retrieves the grouping parameter of the audio session.
            </summary>
            <param name="groupingId">Receives the grouping parameter ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.SetGroupingParam(System.Guid,System.Guid)">
            <summary>
            Assigns a session to a grouping of sessions.
            </summary>
            <param name="groupingId">The new grouping parameter ID.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.RegisterAudioSessionNotification(WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents)">
            <summary>
            Registers the client to receive notifications of session events, including changes in the session state.
            </summary>
            <param name="client">A client-implemented <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.UnregisterAudioSessionNotification(WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents)">
            <summary>
            Deletes a previous registration by the client to receive notifications.
            </summary>
            <param name="client">A client-implemented <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetSessionIdentifier(System.String@)">
            <summary>
            Retrieves the session identifier.
            </summary>
            <param name="sessionId">Receives the audio session identifier.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetSessionInstanceIdentifier(System.String@)">
            <summary>
            Retrieves the identifier of the session instance.
            </summary>
            <param name="instanceId">Receives the identifier of a particular instance of the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.GetProcessId(System.UInt32@)">
            <summary>
            Retrieves the process identifier of the session.
            </summary>
            <param name="processId">Receives the process identifier of the audio session. </param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.IsSystemSoundsSession">
            <summary>
            Indicates whether the session is a system sounds session.
            </summary>
            <returns>An HRESULT code returning S_OK (0x0) or S_FALSE (0x1), indicating whether or not the session is a system sounds session.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl2.SetDuckingPreference(System.Boolean)">
            <summary>
            Enables or disables the default stream attenuation experience (auto-ducking) provided by the system.
            </summary>
            <param name="optOut">True to disable system auto-ducking, or false to enable.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionEnumerator">
            <summary>
            Enumerates audio sessions on an audio device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368281.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEnumerator.GetCount(System.Int32@)">
            <summary>
            Gets the total number of audio sessions that are open on the audio device.
            </summary>
            <param name="count">Receives the total number of audio sessions.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEnumerator.GetSession(System.Int32,WinUtilities.CoreAudio.Interfaces.IAudioSessionControl@)">
            <summary>
            Gets the audio session specified by an audio session number. 
            </summary>
            <param name="index">The zero-based index of the session.</param>
            <param name="session">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl"/> session object in the collection that is maintained by the session enumerator.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents">
            <summary>
            Provides notifications of session-related events such as changes in the volume level, display name, and session state.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368289.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnDisplayNameChanged(System.String,System.Guid@)">
            <summary>
            Notifies the client that the display name for the session has changed.
            </summary>
            <param name="displayName">The new display name for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnIconPathChanged(System.String,System.Guid@)">
            <summary>
            Notifies the client that the display icon for the session has changed.
            </summary>
            <param name="iconPath">The path for the new display icon for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnSimpleVolumeChanged(System.Single,System.Boolean,System.Guid@)">
            <summary>
            Notifies the client that the volume level or muting state of the session has changed.
            </summary>
            <param name="volume">The new volume level for the audio session.</param>
            <param name="isMuted">The new muting state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnChannelVolumeChanged(System.UInt32,System.IntPtr,System.UInt32,System.Guid@)">
            <summary>
            Notifies the client that the volume level of an audio channel in the session submix has changed.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="newVolumes">An array of volumnes cooresponding with each channel index.</param>
            <param name="channelIndex">The number of the channel whose volume level changed.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnGroupingParamChanged(System.Guid@,System.Guid@)">
            <summary>
            Notifies the client that the grouping parameter for the session has changed.
            </summary>
            <param name="groupingId">The new grouping parameter for the session.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnStateChanged(WinUtilities.CoreAudio.Enumerations.AudioSessionState)">
            <summary>
            Notifies the client that the stream-activity state of the session has changed.
            </summary>
            <param name="state">The new session state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionEvents.OnSessionDisconnected(WinUtilities.CoreAudio.Enumerations.AudioSessionDisconnectReason)">
            <summary>
            Notifies the client that the session has been disconnected.
            </summary>
            <param name="disconnectReason">The reason that the audio session was disconnected.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager">
            <summary>
            Enables a client to access the session controls and volume controls for both cross-process and process-specific audio sessions.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370948.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager.GetAudioSessionControl(System.Guid,System.UInt32,WinUtilities.CoreAudio.Interfaces.IAudioSessionControl@)">
            <summary>
            Retrieves an audio session control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="sessionControl">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager.GetSimpleAudioVolume(System.Guid,System.UInt32,WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume@)">
            <summary>
            Retrieves a simple audio volume control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="audioVolume">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2">
            <summary>
            Enables an application to manage submixes for the audio device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370950.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.GetAudioSessionControl(System.Guid,System.UInt32,WinUtilities.CoreAudio.Interfaces.IAudioSessionControl@)">
            <summary>
            Retrieves an audio session control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="sessionControl">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.GetSimpleAudioVolume(System.Guid,System.UInt32,WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume@)">
            <summary>
            Retrieves a simple audio volume control.
            </summary>
            <param name="sessionId">A new or existing session ID.</param>
            <param name="streamFlags">Audio session flags.</param>
            <param name="audioVolume">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume"/> interface for the audio session.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.GetSessionEnumerator(WinUtilities.CoreAudio.Interfaces.IAudioSessionEnumerator@)">
            <summary>
            Gets a pointer to the audio session enumerator object used to enumerate sessions.
            </summary>
            <param name="sessionList">Receives the session enumerator object that the client can use to enumerate audio sessions on the audio device.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.RegisterSessionNotification(WinUtilities.CoreAudio.Interfaces.IAudioSessionNotification)">
            <summary>
            Registers the application to receive a notification when a session is created.
            </summary>
            <param name="client">The client to be called when session events are raised.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.UnregisterSessionNotification(WinUtilities.CoreAudio.Interfaces.IAudioSessionNotification)">
            <summary>
            Deletes the registration to receive a notification when a session is created.
            </summary>
            <param name="client">Removes the client from the callback list for session events.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.RegisterDuckNotification(System.String,WinUtilities.CoreAudio.Interfaces.IAudioVolumeDuckNotification)">
            <summary>
            Registers the application to receive ducking notifications.
            </summary>
            <param name="sessionId">A session instance identifier.</param>
            <param name="client">The client to be called when ducking events are raised.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionManager2.UnregisterDuckNotification(WinUtilities.CoreAudio.Interfaces.IAudioVolumeDuckNotification)">
            <summary>
            Deletes the registration to receive ducking notifications.
            </summary>
            <param name="client">Removes the client from the callback list for ducking events.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionNotification">
            <summary>
            Provides notification when an audio session is created.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370969.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioSessionNotification.OnSessionCreated(WinUtilities.CoreAudio.Interfaces.IAudioSessionControl)">
            <summary>
            Notifies the registered processes that the audio session has been created.
            </summary>
            <param name="sessionControl">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioSessionControl"/> interface of the audio session that was created.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioStreamVolume">
            <summary>
            Enables a client to control and monitor the volume levels for all of the channels in an audio stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370977.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioStreamVolume.GetChannelCount(System.UInt32@)">
            <summary>
            Retrieves the number of channels contained in the audio stream.
            </summary>
            <param name="count">Receives the channel count.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioStreamVolume.SetChannelVolume(System.UInt32,System.Single)">
            <summary>
            Sets the volume level for the specified channel in the audio stream.
            </summary>
            <param name="index">The zero-based index of the channel.</param>
            <param name="level">The new volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioStreamVolume.GetChannelVolume(System.UInt32,System.Single@)">
            <summary>
            Retrieves the volume level for the specified channel in the audio stream.
            </summary>
            <param name="index">The zero-based channel index.</param>
            <param name="level">Receives the volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioStreamVolume.SetAllVolumes(System.UInt32,System.Single[])">
            <summary>
            Sets the individual volume levels for all the channels in the audio stream.
            </summary>
            <param name="count">The number of channels in the audio stream. This must match the volume level array length.</param>
            <param name="levels">The new volume levels for each channel in the audio stream, expressed as normalized values between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioStreamVolume.GetAllVolumes(System.UInt32,System.Single[])">
            <summary>
            Retrieves the volume levels for all the channels in the audio stream.
            </summary>
            <param name="length">The number of elements in the volumes array.</param>
            <param name="volumes">Receives an array of volume levels for the channels in the audio stream.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioVolumeDuckNotification">
            <summary>
            Used to by the system to send notifications about stream attenuation changes.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371006.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioVolumeDuckNotification.OnVolumeDuckNotification(System.String,System.UInt32)">
            <summary>
            Sends a notification about a pending system ducking event.
            </summary>
            <param name="sessionId">A string containing the session instance identifier of the communications session that raises the the auto-ducking event.</param>
            <param name="activeSessionCount">The number of active communications sessions.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioVolumeDuckNotification.OnVolumeUnduckNotification(System.String)">
            <summary>
            Sends a notification about a pending system unducking event.
            </summary>
            <param name="sessionId">A string containing the session instance identifier of the terminating communications session that intiated the ducking.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IChannelAudioVolume">
            <summary>
            Enables a client to control and monitor the volume levels for all of the channels in the audio session.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371023.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IChannelAudioVolume.GetChannelCount(System.UInt32@)">
            <summary>
            Retrieves the number of channels contained in the session.
            </summary>
            <param name="channelCount">Receives the channel count.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IChannelAudioVolume.SetChannelVolume(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the volume level for the specified channel in the session.
            </summary>
            <param name="index">The zero-based index of the channel.</param>
            <param name="level">The new volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IChannelAudioVolume.GetChannelVolume(System.UInt32,System.Single@)">
            <summary>
            Retrieves the volume level for the specified channel in the session.
            </summary>
            <param name="index">The zero-based channel index.</param>
            <param name="level">Receives the volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IChannelAudioVolume.SetAllVolumes(System.UInt32,System.Single[],System.Guid)">
            <summary>
            Sets the individual volume levels for all the channels in the session.
            </summary>
            <param name="channelCount">The number of channels in the audio stream. This must match the volume level array length.</param>
            <param name="levels">The new volume levels for each channel in the audio stream, expressed as normalized values between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IChannelAudioVolume.GetAllVolumes(System.UInt32,System.Single[])">
            <summary>
            Retrieves the volume levels for all the channels in the session.
            </summary>
            <param name="length">The number of elements in the volumes array.</param>
            <param name="volumes">Receives an array of volume levels for the channels in the audio stream.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume">
            <summary>
            Enables a client to control the master volume level of an audio session. 
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316531.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume.SetMasterVolume(System.Single,System.Guid)">
            <summary>
            Sets the master volume level for the audio session.
            </summary>
            <param name="levelNorm">The new volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume.GetMasterVolume(System.Single@)">
            <summary>
            Retrieves the client volume level for the audio session.
            </summary>
            <param name="levelNorm">Receives the volume level expressed as a normalized value between 0.0 and 1.0. </param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            Sets the muting state for the audio session.
            </summary>
            <param name="isMuted">The new muting state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.ISimpleAudioVolume.GetMute(System.Boolean@)">
            <summary>
            Retrieves the current muting state for the audio session.
            </summary>
            <param name="isMuted">Receives the muting state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioAutoGainControl">
            <summary>
            Provides access to a hardware automatic gain control (AGC).
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370853.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioAutoGainControl.GetEnabled(System.Boolean@)">
            <summary>
            Gets the current state (enabled or disabled) of the AGC.
            </summary>
            <param name="isEnabled">Receives the current AGC state.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioAutoGainControl.SetEnabled(System.Boolean,System.Guid)">
            <summary>
            Enables or disables the AGC.
            </summary>
            <param name="isEnabled">The new AGC state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioBass">
            <summary>
            Provides access to a hardware bass-level control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370857.aspx
            </remarks>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioChannelConfig">
            <summary>
            Provides access to a hardware channel-configuration control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370862.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioChannelConfig.SetChannelConfig(System.UInt32,System.Guid)">
            <summary>
            Sets the channel-configuration mask in a channel-configuration control.
            </summary>
            <param name="channelConfig">The new channel-configuration mask value.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioChannelConfig.GetChannelConfig(System.UInt32@)">
            <summary>
            Gets the current channel-configuration mask from a channel-configuration control.
            </summary>
            <param name="channelConfig">Receives the current channel-configuration mask value.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioInputSelector">
            <summary>
            Provides access to a hardware multiplexer control (input selector).
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368220.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioInputSelector.GetSelection(System.UInt32@)">
            <summary>
            Gets the local ID of the part that is connected to the selector input that is currently selected.
            </summary>
            <param name="partId">Receives the local ID of the part that directly links to the currently selected selector input.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioInputSelector.SetSelection(System.UInt32,System.Guid)">
            <summary>
            Selects one of the inputs of the input selector.
            </summary>
            <param name="partId">The ID of the new selector input.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioLoudness">
            <summary>
            Provides access to a loudness compensation control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368224.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioLoudness.GetEnabled(System.Boolean@)">
            <summary>
            Gets the current state (enabled or disabled) of the loudness control.
            </summary>
            <param name="isEnabled">Receives the current loudness state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioLoudness.SetEnabled(System.Boolean,System.Guid)">
            <summary>
            Enables or disables the loudness control.
            </summary>
            <param name="isEnabled">Sets the new loudness state.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioMidrange">
            <summary>
            Provides access to a hardware midrange-level control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368232.aspx
            </remarks>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioMute">
            <summary>
            Provides access to a hardware mute control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368233.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioMute.SetMute(System.Boolean,System.Guid)">
            <summary>
            Enables or disables the mute control.
            </summary>
            <param name="isMuted">The new state of the mute control.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioMute.GetMute(System.Boolean@)">
            <summary>
            Gets the current state (enabled or disabled) of the mute control.
            </summary>
            <param name="isMuted">Receives the current state of the mute control.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioOutputSelector">
            <summary>
            Provides access to a hardware demultiplexer control (output selector).
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368236.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioOutputSelector.GetSelection(System.UInt32@)">
            <summary>
            Gets the local ID of the part that is connected to the selector output that is currently selected.
            </summary>
            <param name="partId">Receives the local ID of the part that has a direct link to the currently selected output.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioOutputSelector.SetSelection(System.UInt32,System.Guid)">
            <summary>
            Selects one of the outputs of the output selector.
            </summary>
            <param name="partId">The ID of the new selector output.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioPeakMeter">
            <summary>
            Provides access to a hardware peak-meter control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368239.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioPeakMeter.GetChannelCount(System.UInt32@)">
            <summary>
            Gets the number of channels in the audio stream.
            </summary>
            <param name="count">Receives the channel count.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioPeakMeter.GetLevel(System.UInt32,System.Single@)">
            <summary>
            Gets the peak level that the peak meter recorded for the specified channel since the peak level for that channel was previously read.
            </summary>
            <param name="index">The zero-based channel index.</param>
            <param name="level">Receives the peak meter level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioTreble">
            <summary>
            Provides access to a hardware treble-level control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371001.aspx
            </remarks>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioVolumeLevel">
            <summary>
            Provides access to a hardware volume control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371019.aspx
            </remarks>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IConnector">
            <summary>
            Represents a point of connection between components.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371048.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.GetType(WinUtilities.CoreAudio.Enumerations.ConnectorType@)">
            <summary>
            Gets the type of this connector.
            </summary>
            <param name="connectorType">Receives the connector type.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.GetDataFlow(WinUtilities.CoreAudio.Enumerations.DataFlow@)">
            <summary>
            Gets the direction of data flow through this connector.
            </summary>
            <param name="dataFlow">Receives the data-flow direction.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.ConnectTo(WinUtilities.CoreAudio.Interfaces.IConnector)">
            <summary>
            Connects this connector to a connector in another device topology object.
            </summary>
            <param name="connector">The connector in the other device topology.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.Disconnect">
            <summary>
            Disconnects this connector from another connector.
            </summary>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.IsConnected(System.Boolean@)">
            <summary>
            Indicates whether this connector is connected to another connector.
            </summary>
            <param name="isConnected">Receives the connection state.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.GetConnectedTo(WinUtilities.CoreAudio.Interfaces.IConnector@)">
            <summary>
            Gets the connector to which this connector is connected.
            </summary>
            <param name="connector">Receives the connector that the current object is connected to.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.GetConnectorIdConnectedTo(System.String@)">
            <summary>
            Gets the global ID of the connector, if any, that this connector is connected to.
            </summary>
            <param name="connectorId">Receives the other connectors ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IConnector.GetDeviceIdConnectedTo(System.String@)">
            <summary>
            Gets the device identifier of the audio device, if any, that this connector is connected to.
            </summary>
            <param name="deviceId">Receives a string that contains the device identifier of the connected device.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IControlChangeNotify">
            <summary>
            Provides notifications when the status of a part (connector or subunit) changes.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371088.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IControlChangeNotify.OnNotify(System.UInt32,System.Guid)">
            <summary>
            Notifies the client when the status of a part (connector or subunit) changes.
            </summary>
            <param name="processId">The process ID of the client that changed the state of the control.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IControlInterface">
            <summary>
            Represents a control interface on a part (connector or subunit) in a device topology.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371098.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IControlInterface.GetName(System.String@)">
            <summary>
            Gets the friendly name for the audio function that the control interface encapsulates.
            </summary>
            <param name="name">Receives a string that contains the friendly name.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IControlInterface.GetIID(System.Guid@)">
            <summary>
            Gets the interface ID of the function-specific control interface of the part.
            </summary>
            <param name="interfaceId">Receives the interface ID of the function-specific control interface of the part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IDeviceSpecificProperty">
            <summary>
            Provides access to the control value of a device-specific hardware control.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371121.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceSpecificProperty.GetType(System.IntPtr@)">
            <summary>
            Gets the data type of the device-specific property.
            </summary>
            <param name="dataType">Receives the data type of the device-specific property value.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceSpecificProperty.GetValue(System.IntPtr@,System.UInt32@)">
            <summary>
            Gets the value of the device-specific property.
            </summary>
            <param name="propertyValue">Receives the property value.</param>
            <param name="propertySize">Sends the size in bytes of the property value, then receives the actual size of the property value written to the buffer.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceSpecificProperty.SetValue(System.IntPtr,System.UInt32,System.Guid)">
            <summary>
            Sets the value of the device-specific property.
            </summary>
            <param name="propertyValue">The property value.</param>
            <param name="propertySize">The property value size.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceSpecificProperty.Get4BRange(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the 4-byte range of the device-specific property.
            </summary>
            <param name="propertyMin">Receives the minimum property value.</param>
            <param name="propertyMax">Receives the maximum property value.</param>
            <param name="propertyInc">Receives the stepping value between consecutive property values in the range.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IDeviceTopology">
            <summary>
            Provides access to the topology of an audio device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371376.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetConnectorCount(System.UInt32@)">
            <summary>
            Gets the number of connectors in the device-topology object.
            </summary>
            <param name="count">Receives the connector count.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetConnector(System.UInt32,WinUtilities.CoreAudio.Interfaces.IConnector@)">
            <summary>
            Gets the connector that is specified by a connector number.
            </summary>
            <param name="index">The zero-based index of the connector.</param>
            <param name="connector">Receives the <see cref="T:WinUtilities.CoreAudio.Interfaces.IConnector"/> interface of the connector object.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetSubunitCount(System.UInt32@)">
            <summary>
            Gets the number of subunits in the device topology.
            </summary>
            <param name="subunitCount">Receives the subunit count.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetSubunit(System.UInt32,WinUtilities.CoreAudio.Interfaces.ISubunit@)">
            <summary>
            Gets the subunit that is specified by a subunit number.
            </summary>
            <param name="subunitIndex">The zero-based index of the subunit.</param>
            <param name="subunit">Receives the <see cref="T:WinUtilities.CoreAudio.Interfaces.ISubunit"/> interface of the object.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetPartById(System.UInt32,WinUtilities.CoreAudio.Interfaces.IPart@)">
            <summary>
            Gets a part that is identified by its local ID.
            </summary>
            <param name="partId">The ID of the part to get.</param>
            <param name="part">Receives the <see cref="T:WinUtilities.CoreAudio.Interfaces.IPart"/> interface of the part object.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetDeviceId(System.String@)">
            <summary>
            Gets the device identifier of the device that is represented by the device-topology object.
            </summary>
            <param name="deviceId">Receives a string containing the device ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IDeviceTopology.GetSignalPath(WinUtilities.CoreAudio.Interfaces.IPart,WinUtilities.CoreAudio.Interfaces.IPart,System.Boolean,WinUtilities.CoreAudio.Interfaces.IPartsList@)">
            <summary>
            Gets a list of parts in the signal path that links two parts, if the path exists.
            </summary>
            <param name="partFrom">The part at the beginning of the signal path.</param>
            <param name="partTo">The part at the end of the signal path.</param>
            <param name="rejectMixedPaths">Specifies whether to reject paths that contain mixed data.</param>
            <param name="partList">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.IPartsList"/> interface instance.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IKsFormatSupport">
            <summary>
            Provides information about the audio data formats that are supported by a software-configured I/O connection.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371384.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsFormatSupport.IsFormatSupported(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Indicates whether the audio adapter device supports the specified audio stream format.
            </summary>
            <param name="format">An audio-stream format specifier.</param>
            <param name="size">The size in bytes of the buffer that contains the format specifier.</param>
            <param name="isSupported">Receives a value to indicate whether the format is supported.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsFormatSupport.GetDevicePreferredFormat(System.IntPtr@)">
            <summary>
            Gets the preferred audio stream format for the connection.
            </summary>
            <param name="format">Receives the format specifier for the preferred format.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IKsJackDescription">
            <summary>
            Provides information about the jacks or internal connectors that provide a physical connection between a device and an endpoint.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371387.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsJackDescription.GetJackCount(System.UInt32@)">
            <summary>
            Gets the number of jacks required to connect to an endpoint device.
            </summary>
            <param name="count">Receives the number of jacks associated with the connector.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsJackDescription.GetJackDescription(System.UInt32,WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION@)">
            <summary>
            Gets a description of an audio jack.
            </summary>
            <param name="index">The zero-based index of the jack.</param>
            <param name="descriptor">Receives a structure of type <see cref="T:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION"/> that contains information about the jack.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IKsJackDescription2">
            <summary>
            Provides information about the jacks or internal connectors that provide a physical connection between a device and an endpoint.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371388.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsJackDescription2.GetJackCount(System.UInt32@)">
            <summary>
            Gets the number of jacks on the connector, which are required to connect to an endpoint device.
            </summary>
            <param name="count">Receives the number of audio jacks associated with the connector.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsJackDescription2.GetJackDescription(System.UInt32,WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION2@)">
            <summary>
            Gets the description of a specified audio jack.
            </summary>
            <param name="index">The zero-based index of the jack.</param>
            <param name="descriptor">Receives a structure of type <see cref="T:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION2"/> that contains information about the jack.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IKsJackSinkInformation">
            <summary>
            Provides access to jack sink information if the jack is supported by the hardware.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371393.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IKsJackSinkInformation.GetJackSinkInformation(WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION@)">
            <summary>
            Retrieves the sink information for the specified jack. 
            </summary>
            <param name="information">Receives a structure of type <see cref="T:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION"/> that contains the jack sink information.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IPart">
            <summary>
            Represents a part (connector or subunit) of a device topology.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371429.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetName(System.String@)">
            <summary>
            Gets the friendly name of this part.
            </summary>
            <param name="name">Receives the friendly name of this part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetLocalId(System.UInt32@)">
            <summary>
            Gets the local ID of this part.
            </summary>
            <param name="localId">Receives the local ID of this part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetGlobalId(System.String@)">
            <summary>
            Gets the global ID of this part.
            </summary>
            <param name="globalId">Receives a string that contains the global ID.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetPartType(WinUtilities.CoreAudio.Enumerations.PartType@)">
            <summary>
            Gets the part type of this part.
            </summary>
            <param name="partType">Receives the method writes the part type.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetSubType(System.Guid@)">
            <summary>
            Gets the part subtype of this part.
            </summary>
            <param name="subType">Receives the subtype ID for this part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetControlInterfaceCount(System.UInt32@)">
            <summary>
            Gets the number of control interfaces that this part supports.
            </summary>
            <param name="count">Receives the number of control interfaces on this part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetControlInterface(System.UInt32,WinUtilities.CoreAudio.Interfaces.IControlInterface@)">
            <summary>
            Gets a reference to the specified control interface, if this part supports it.
            </summary>
            <param name="index">The zero-based index of the control interface.</param>
            <param name="control">Receives the <see cref="T:WinUtilities.CoreAudio.Interfaces.IControlInterface"/> interface of the specified audio function.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.EnumPartsIncoming(WinUtilities.CoreAudio.Interfaces.IPartsList@)">
            <summary>
            Retrieves a list of all the parts that reside on data paths that are upstream from this part.
            </summary>
            <param name="partList">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.IPartsList"/> interface that encapsulates the list of parts that are immediately upstream from this part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.EnumPartsOutgoing(WinUtilities.CoreAudio.Interfaces.IPartsList@)">
            <summary>
            Retrieves a list of all the parts that reside on data paths that are downstream from this part.
            </summary>
            <param name="partList">Receives an <see cref="T:WinUtilities.CoreAudio.Interfaces.IPartsList"/> interface that encapsulates the list of parts that are immediately downstream from this part.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.GetTopologyObject(WinUtilities.CoreAudio.Interfaces.IDeviceTopology@)">
            <summary>
            Gets a reference to the <see cref="T:WinUtilities.CoreAudio.Interfaces.IDeviceTopology"/> interface of the device topology object that contains this part.
            </summary>
            <param name="deviceTopology">Receives the <see cref="T:WinUtilities.CoreAudio.Interfaces.IDeviceTopology"/> interface of the device topology object.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.Activate(System.UInt32,System.Guid@,System.Object@)">
            <summary>
            Activates an interface on a connector or subunit.
            </summary>
            <param name="classContext">The execution context in which the code that manages the newly created object will run.</param>
            <param name="interfaceId">The interface ID for the requested control function.</param>
            <param name="instancePtr">Receives the address of an instance implementing the interface specified by the interfaceId parameter.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.RegisterControlChangeCallback(System.Guid@,WinUtilities.CoreAudio.Interfaces.IControlChangeNotify)">
            <summary>
            Registers the <see cref="T:WinUtilities.CoreAudio.Interfaces.IControlChangeNotify"/> interface, which the client implements to receive notifications of status changes in this part.
            </summary>
            <param name="interfaceId">The function-specific control interface that is to be monitored for control changes.</param>
            <param name="client">A client object that implements the <see cref="T:WinUtilities.CoreAudio.Interfaces.IControlChangeNotify"/> interface.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPart.UnregisterControlChangeCallback(WinUtilities.CoreAudio.Interfaces.IControlChangeNotify)">
            <summary>
            Removes a previous registration of an <see cref="T:WinUtilities.CoreAudio.Interfaces.IControlChangeNotify"/> interface.
            </summary>
            <param name="client">The client whose registration is to be removed.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IPartsList">
            <summary>
            Represents a list of parts, each of which is an object with an <see cref="T:WinUtilities.CoreAudio.Interfaces.IPart"/> interface that represents a connector or subunit.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371430.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPartsList.GetCount(System.UInt32@)">
            <summary>
            Gets the number of parts in the parts list.
            </summary>
            <param name="count">Receives the number of parts in the parts list.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPartsList.GetPart(System.UInt32,WinUtilities.CoreAudio.Interfaces.IPart@)">
            <summary>
            Gets a part from the parts list.
            </summary>
            <param name="index">The zero-based index of the part.</param>
            <param name="part">Receives the <see cref="T:WinUtilities.CoreAudio.Interfaces.IPart"/> interface of the specified part object.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel">
            <summary>
            Represents a generic subunit control interface that provides per-channel control over the
            volume level, in decibels, of an audio stream or of a frequency band in an audio stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd371447.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel.GetChannelCount(System.UInt32@)">
            <summary>
            Gets the number of channels in the audio stream.
            </summary>
            <param name="channelCount">Receives the number of channels in the audio stream.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel.GetLevelRange(System.UInt32,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the range, in decibels, of the volume level of the specified channel.
            </summary>
            <param name="index">The zero-based channel index.</param>
            <param name="volumeMin">Receives the minimum volume level in decibels.</param>
            <param name="volumeMax">Receives the maximum volume level in decibels.</param>
            <param name="volumeStep">Receives the volume increment level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel.GetLevel(System.UInt32,System.Single@)">
            <summary>
            Gets the volume level, in decibels, of the specified channel.
            </summary>
            <param name="index">The zero-based channel index.</param>
            <param name="level">Receives the volume level, in decibels, of the specified channel.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel.SetLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the volume level, in decibels, of the specified channel.
            </summary>
            <param name="index">The zero-based channel index.</param>
            <param name="level">The new volume level, in decibels, of the specified channel.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel.SetLevelUniform(System.Single,System.Guid)">
            <summary>
            Sets all channels in the audio stream to the same uniform volume level, in decibels.
            </summary>
            <param name="level">The new uniform level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IPerChannelDbLevel.SetLevelAllChannels(System.Single[],System.UInt32,System.Guid)">
            <summary>
            Sets the volume levels, in decibels, of all the channels in the audio stream.
            </summary>
            <param name="levels">An array of new volume levels, per channel, in decibels.</param>
            <param name="channelCount">The number of channels in the audio stream. This must match the array length.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation succeeded of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.ISubunit">
            <summary>
            Represents a hardware subunit (for example, a volume control) that lies in the data path between a client and an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316540.aspx
            </remarks>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume">
            <summary>
            Represents the volume controls on the audio stream to or from an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370892.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.RegisterControlChangeNotify(WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback)">
            <summary>
            Registers a client's notification callback interface.
            </summary>
            <param name="client">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback"/> interface that is registering for notification callbacks.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.UnregisterControlChangeNotify(WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback)">
            <summary>
            Deletes the registration of a client's notification callback interface.
            </summary>
            <param name="client">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback"/> interface that previously registered for notification callbacks.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetChannelCount(System.UInt32@)">
            <summary>
            Gets a count of the channels in the audio stream.
            </summary>
            <param name="channelCount">The number of channels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)">
            <summary>
            Sets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The new master volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.SetMasterVolumeLevelScalar(System.Single,System.Guid)">
            <summary>
            Sets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetMasterVolumeLevel(System.Single@)">
            <summary>
            Gets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetMasterVolumeLevelScalar(System.Single@)">
            <summary>
            Gets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.SetChannelVolumeLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the volume level, in decibels, of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.SetChannelVolumeLevelScalar(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the normalized, audio-tapered volume level of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetChannelVolumeLevel(System.UInt32,System.Single@)">
            <summary>
            Gets the volume level, in decibels, of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetChannelVolumeLevelScalar(System.UInt32,System.Single@)">
            <summary>
            Gets the normalized, audio-tapered volume level of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            Sets the muting state of the audio stream.
            </summary>
            <param name="isMuted">True to mute the stream, or false to unmute the stream.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetMute(System.Boolean@)">
            <summary>
            Gets the muting state of the audio stream.
            </summary>
            <param name="isMuted">The muting state. True if the stream is muted, false otherwise.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetVolumeStepInfo(System.UInt32@,System.UInt32@)">
            <summary>
            Gets information about the current step in the volume range.
            </summary>
            <param name="step">The current zero-based step index.</param>
            <param name="stepCount">The total number of steps in the volume range.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.VolumeStepUp(System.Guid)">
            <summary>
            Increases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.VolumeStepDown(System.Guid)">
            <summary>
            Decreases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.QueryHardwareSupport(System.UInt32@)">
            <summary>
            Queries the audio endpoint device for its hardware-supported functions.
            </summary>
            <param name="hardwareSupportMask">A hardware support mask that indicates the capabilities of the endpoint.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolume.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the volume range of the audio stream, in decibels.
            </summary>
            <param name="volumeMin">The minimum volume level in decibels.</param>
            <param name="volumeMax">The maximum volume level in decibels.</param>
            <param name="volumeStep">The volume increment level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx">
            <summary>
            Provides volume controls on the audio stream to or from a device endpoint.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370899.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.RegisterControlChangeNotify(WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback)">
            <summary>
            Registers a client's notification callback interface.
            </summary>
            <param name="client">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback"/> interface that is registering for notification callbacks.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.UnregisterControlChangeNotify(WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback)">
            <summary>
            Deletes the registration of a client's notification callback interface.
            </summary>
            <param name="clientCallback">The <see cref="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback"/> interface that previously registered for notification callbacks.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetChannelCount(System.UInt32@)">
            <summary>
            Gets a count of the channels in the audio stream.
            </summary>
            <param name="channelCount">The number of channels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.SetMasterVolumeLevel(System.Single,System.Guid@)">
            <summary>
            Sets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The new master volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.SetMasterVolumeLevelScalar(System.Single,System.Guid@)">
            <summary>
            Sets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetMasterVolumeLevel(System.Single@)">
            <summary>
            Gets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetMasterVolumeLevelScalar(System.Single@)">
            <summary>
            Gets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.SetChannelVolumeLevel(System.UIntPtr,System.Single,System.Guid@)">
            <summary>
            Sets the volume level, in decibels, of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.SetChannelVolumeLevelScalar(System.UIntPtr,System.Single,System.Guid@)">
            <summary>
            Sets the normalized, audio-tapered volume level of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetChannelVolumeLevel(System.UIntPtr,System.Single@)">
            <summary>
            Gets the volume level, in decibels, of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetChannelVolumeLevelScalar(System.UIntPtr,System.Single@)">
            <summary>
            Gets the normalized, audio-tapered volume level of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.SetMute(System.Boolean,System.Guid@)">
            <summary>
            Sets the muting state of the audio stream.
            </summary>
            <param name="isMuted">True to mute the stream, or false to unmute the stream.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetMute(System.Boolean@)">
            <summary>
            Gets the muting state of the audio stream.
            </summary>
            <param name="isMuted">The muting state. True if the stream is muted, false otherwise.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetVolumeStepInfo(System.UIntPtr@,System.UIntPtr@)">
            <summary>
            Gets information about the current step in the volume range.
            </summary>
            <param name="step">The current zero-based step index.</param>
            <param name="stepCount">The total number of steps in the volume range.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.VolumeStepUp(System.Guid@)">
            <summary>
            Increases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.VolumeStepDown(System.Guid@)">
            <summary>
            Decreases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.QueryHardwareSupport(System.UInt32@)">
            <summary>
            Queries the audio endpoint device for its hardware-supported functions.
            </summary>
            <param name="hardwareSupportMask">A hardware support mask that indicates the capabilities of the endpoint.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the volume range of the audio stream, in decibels.
            </summary>
            <param name="volumeMin">The minimum volume level in decibels.</param>
            <param name="volumeMax">The maximum volume level in decibels.</param>
            <param name="volumeStep">The volume increment level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeEx.GetVolumeRangeChannel(System.UInt32,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the volume range for a specified channel.
            </summary>
            <param name="channelNumber">The channel number for which to get the volume range.</param>
            <param name="volumeMin">The minimum volume level for the channel, in decibels.</param>
            <param name="volumeMax">The maximum volume level for the channel, in decibels.</param>
            <param name="volumeStep">The volume increment for the channel, in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioMeterInformation">
            <summary>
            Represents a peak meter on the audio stream to or from an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd368227.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioMeterInformation.GetPeakValue(System.Single@)">
            <summary>
            Gets the peak sample value for the channels in the audio stream.
            </summary>
            <param name="peak">The peak sample value for the audio stream.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioMeterInformation.GetMeteringChannelCount(System.UInt32@)">
            <summary>
            Gets the number of channels in the audio stream that are monitored by peak meters.
            </summary>
            <param name="channelCount">The channel count.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioMeterInformation.GetChannelsPeakValues(System.UInt32,System.Single[])">
            <summary>
            Gets the peak sample values for all the channels in the audio stream.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="peakValues">An array of peak sample values.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioMeterInformation.QueryHardwareSupport(System.UInt32@)">
            <summary>
            Queries the audio endpoint device for its hardware-supported functions.
            </summary>
            <param name="hardwareSupportMask">A hardware support mask that indicates the capabilities of the endpoint.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback">
            <summary>
            Provides notifications when the volume level or muting state of an audio endpoint device changes.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370894.aspx
            </remarks>
        </member>
        <member name="M:WinUtilities.CoreAudio.Interfaces.IAudioEndpointVolumeCallback.OnNotify(System.IntPtr)">
            <summary>
            Notifies the client that the volume level or muting state of the audio endpoint device has changed.
            </summary>
            <param name="notificationData">The volume-notification data.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:WinUtilities.CoreAudio.Structures.AUDIO_VOLUME_NOTIFICATION_DATA">
            <summary>
            Describes a change in the volume level or muting state of an audio endpoint device.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370799.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.AUDIO_VOLUME_NOTIFICATION_DATA.EventContext">
            <summary>
            The user event context supplied during the change request.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.AUDIO_VOLUME_NOTIFICATION_DATA.IsMuted">
            <summary>
            Specifies whether the audio stream is currently muted.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.AUDIO_VOLUME_NOTIFICATION_DATA.MasterVolume">
            <summary>
            The current master volume level of the audio stream.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.AUDIO_VOLUME_NOTIFICATION_DATA.ChannelCount">
            <summary>
            Specifies the number of channels in the audio stream.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.AUDIO_VOLUME_NOTIFICATION_DATA.ChannelVolumes">
            <summary>
            The volume level of each channel in the stream.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Structures.DIRECTX_AUDIO_ACTIVATION_PARAMS">
            <summary>
            Specifies the initialization parameters for a DirectSound stream.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd370826.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.DIRECTX_AUDIO_ACTIVATION_PARAMS.ParamsSize">
            <summary>
            The size in bytes of the structure.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.DIRECTX_AUDIO_ACTIVATION_PARAMS.AudioSession">
            <summary>
            A GUID value that identifies the audio session that the stream belongs to.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.DIRECTX_AUDIO_ACTIVATION_PARAMS.AudioStreamFlags">
            <summary>
            Stream-initialization flags.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION">
            <summary>
            Describes an audio jack.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316543.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.ChannelMapping">
            <summary>
            Specifies the mapping of the two audio channels in a stereo jack to speaker positions.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.Color">
            <summary>
            The jack color.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.ConnectionType">
            <summary>
            The connection type.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.GeoLocation">
            <summary>
            The geometric location of the jack.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.GenLocation">
            <summary>
            The general location of the jack.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.PortConnection">
            <summary>
            The type of port represented by the jack.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION.IsConnected">
            <summary>
            Indicates whether an endpoint device is plugged into the jack, if supported by the adapter.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION2">
            <summary>
            Describes an audio jack.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316545.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION2.DeviceStateInfo">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_DESCRIPTION2.JackCapabilities">
            <summary>
            Stores the audio jack's capabilities.
            </summary>
            <remarks>
            From Ksmedia.h, the available flags for this are:
            1. JACKDESC2_PRESENCE_DETECT_CAPABILITY (0x00000001)
            2. JACKDESC2_DYNAMIC_FORMAT_CHANGE_CAPABILITY (0x00000002) 
            </remarks>
        </member>
        <member name="T:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION">
            <summary>
            Stores information about an audio jack sink.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316549.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.ConnType">
            <summary>
            Specifies the type of connection.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.ManufacturerId">
            <summary>
            Specifies the sink manufacturer identifier.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.ProductId">
            <summary>
            Specifies the sink product identifier.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.AudioLatency">
            <summary>
            Specifies the latency of the audio sink.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.HDCPCapable">
            <summary>
            Specifies whether the sink supports High-bandwidth Digital Content Protection (HDCP).
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.AICapable">
            <summary>
            Specifies whether the sink supports ACP Packet, ISRC1, or ISRC2.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.KSJACK_SINK_INFORMATION.SinkDescriptionLength">
            <summary>
            Specifies the length of the string in the SinkDescription member.
            </summary>
        </member>
        <member name="T:WinUtilities.CoreAudio.Structures.LUID">
            <summary>
            Stores the video port identifier.
            </summary>
            <remarks>
            MSDN Reference: http://msdn.microsoft.com/en-us/library/dd316552.aspx
            </remarks>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.LUID.LowPart">
            <summary>
            LowPart of the video port identifier.
            </summary>
        </member>
        <member name="F:WinUtilities.CoreAudio.Structures.LUID.HighPart">
            <summary>
            HighPart of the video port identifier.
            </summary>
        </member>
        <member name="T:WinUtilities.WM">
            <summary>Enum of all Window Messages.</summary>
        </member>
        <member name="T:WinUtilities.WS">
            <summary>Enum of all Window Styles.</summary>
        </member>
        <member name="F:WinUtilities.WS.BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:WinUtilities.WS.CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:WinUtilities.WS.CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:WinUtilities.WS.CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:WinUtilities.WS.CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:WinUtilities.WS.DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:WinUtilities.WS.DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:WinUtilities.WS.GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:WinUtilities.WS.HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:WinUtilities.WS.MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:WinUtilities.WS.MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:WinUtilities.WS.MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:WinUtilities.WS.MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:WinUtilities.WS.OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:WinUtilities.WS.POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:WinUtilities.WS.SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:WinUtilities.WS.SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:WinUtilities.WS.TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:WinUtilities.WS.VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:WinUtilities.WS.VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="T:WinUtilities.WS_EX">
            <summary>Enum of all Window Ex Styles.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.ACCEPTFILES">
            <summary>Specifies a window that accepts drag-drop files.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.CLIENTEDGE">
            <summary>Specifies a window that has a border with a sunken edge.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.COMPOSITED">
            <summary>
            Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. This style is not supported in Windows 2000.
            </summary>
            <remarks>
            With WS_EX_COMPOSITED set, all descendants of a window get bottom-to-top painting order using double-buffering.
            Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects,
            but only if the descendent window also has the WS_EX_TRANSPARENT bit set.
            Double-buffering allows the window and its descendents to be painted without flicker.
            </remarks>
        </member>
        <member name="F:WinUtilities.WS_EX.CONTEXTHELP">
            <summary>
            Specifies a window that includes a question mark in the title bar. When the user clicks the question mark,
            the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message.
            The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
            The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.CONTROLPARENT">
            <summary>
            Specifies a window which contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when performing navigation operations
            such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.DLGMODALFRAME">
            <summary>Specifies a window that has a double border.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.LAYERED">
            <summary>
            Specifies a window that is a layered window.
            This cannot be used for child windows or if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.LAYOUTRTL">
            <summary>
            Specifies a window with the horizontal origin on the right edge. Increasing horizontal values advance to the left.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.LEFT">
            <summary>Specifies a window that has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.LEFTSCROLLBAR">
            <summary>
            Specifies a window with the vertical scroll bar (if present) to the left of the client area.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.LTRREADING">
            <summary>
            Specifies a window that displays text using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.MDICHILD">
            <summary>
            Specifies a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.NOACTIVATE">
            <summary>
            Specifies a top-level window created with this style does not become the foreground window when the user clicks it.
            The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.NOINHERITLAYOUT">
            <summary>
            Specifies a window which does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.NOREDIRECTIONBITMAP">
            <summary>
            The window does not render to a redirection surface.
            This is for windows that do not have visible content or that use mechanisms other than surfaces to provide their visual.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.RIGHT">
            <summary>
            Specifies a window that has generic "right-aligned" properties. This depends on the window class.
            The shell language must support reading-order alignment for this to take effect.
            Using the WS_EX_RIGHT style has the same effect as using the SS_RIGHT (static), ES_RIGHT (edit), and BS_RIGHT/BS_RIGHTBUTTON (button) control styles.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.RIGHTSCROLLBAR">
            <summary>Specifies a window with the vertical scroll bar (if present) to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.RTLREADING">
            <summary>
            Specifies a window that displays text using right-to-left reading-order properties.
            The shell language must support reading-order alignment for this to take effect.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.STATICEDGE">
            <summary>Specifies a window with a three-dimensional border style intended to be used for items that do not accept user input.</summary>
        </member>
        <member name="F:WinUtilities.WS_EX.TOOLWINDOW">
            <summary>
            Specifies a window that is intended to be used as a floating toolbar.
            A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font.
            A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
            If a tool window has a system menu, its icon is not displayed on the title bar.
            However, you can display the system menu by right-clicking or by typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.TOPMOST">
            <summary>
            Specifies a window that should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
            To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.TRANSPARENT">
            <summary>
            Specifies a window that should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
            The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:WinUtilities.WS_EX.WINDOWEDGE">
            <summary>Specifies a window that has a border with a raised edge.</summary>
        </member>
        <member name="T:WinUtilities.HT">
            <summary>Enum of all Hit Test values.</summary>
        </member>
        <member name="F:WinUtilities.HT.BORDER">
            <summary>In the border of a window that does not have a sizing border.</summary>
        </member>
        <member name="F:WinUtilities.HT.BOTTOM">
            <summary>In the lower-horizontal border of a resizable window (the user can click the mouse to resize the window vertically).</summary>
        </member>
        <member name="F:WinUtilities.HT.BOTTOMLEFT">
            <summary>In the lower-left corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:WinUtilities.HT.BOTTOMRIGHT">
            <summary>In the lower-right corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
        </member>
        <member name="F:WinUtilities.HT.CAPTION">
            <summary>In a title bar.</summary>
        </member>
        <member name="F:WinUtilities.HT.CLIENT">
            <summary>In a client area.</summary>
        </member>
        <member name="F:WinUtilities.HT.CLOSE">
            <summary>In a Close button.</summary>
        </member>
        <member name="F:WinUtilities.HT.ERROR">
            <summary>On the screen background or on a dividing line between windows (same as HTNOWHERE, except that the DefWindowProc function produces a system beep to indicate an error).</summary>
        </member>
        <member name="F:WinUtilities.HT.GROWBOX">
            <summary>In a size box (same as HTSIZE).</summary>
        </member>
        <member name="F:WinUtilities.HT.HELP">
            <summary>In a Help button.</summary>
        </member>
        <member name="F:WinUtilities.HT.HSCROLL">
            <summary>In a horizontal scroll bar.</summary>
        </member>
        <member name="F:WinUtilities.HT.LEFT">
            <summary>In the left border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
        </member>
        <member name="F:WinUtilities.HT.MENU">
            <summary>In a menu.</summary>
        </member>
        <member name="F:WinUtilities.HT.MAXBUTTON">
            <summary>In a Maximize button.</summary>
        </member>
        <member name="F:WinUtilities.HT.MINBUTTON">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:WinUtilities.HT.NOWHERE">
            <summary>On the screen background or on a dividing line between windows.</summary>
        </member>
        <member name="F:WinUtilities.HT.REDUCE">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:WinUtilities.HT.RIGHT">
            <summary>In the right border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
        </member>
        <member name="F:WinUtilities.HT.SIZE">
            <summary>In a size box (same as HTGROWBOX).</summary>
        </member>
        <member name="F:WinUtilities.HT.SYSMENU">
            <summary>In a window menu or in a Close button in a child window.</summary>
        </member>
        <member name="F:WinUtilities.HT.TOP">
            <summary>In the upper-horizontal border of a window.</summary>
        </member>
        <member name="F:WinUtilities.HT.TOPLEFT">
            <summary>In the upper-left corner of a window border.</summary>
        </member>
        <member name="F:WinUtilities.HT.TOPRIGHT">
            <summary>In the upper-right corner of a window border.</summary>
        </member>
        <member name="F:WinUtilities.HT.TRANSPARENT">
            <summary>In a window currently covered by another window in the same thread (the message will be sent to underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).</summary>
        </member>
        <member name="F:WinUtilities.HT.VSCROLL">
            <summary>In the vertical scroll bar.</summary>
        </member>
        <member name="F:WinUtilities.HT.ZOOM">
            <summary>In a Maximize button.</summary>
        </member>
        <member name="T:WinUtilities.MonitorDefault">
            <summary>Determines what to return if an exact match was not found.</summary>
        </member>
        <member name="F:WinUtilities.MonitorDefault.Null">
            <summary>Returns null if point is not on any monitor.</summary>
        </member>
        <member name="F:WinUtilities.MonitorDefault.Primary">
            <summary>Returns primary monitor if point is not on any monitor.</summary>
        </member>
        <member name="F:WinUtilities.MonitorDefault.Nearest">
            <summary>Returns nearest monitor if point is not on any monitor.</summary>
        </member>
        <member name="T:WinUtilities.VKey">
            <summary>Enum of virtual key codes.</summary>
        </member>
        <member name="F:WinUtilities.VKey.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse)
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.UNDEFINED">
            <summary>This key is undefined</summary>
        </member>
        <member name="F:WinUtilities.VKey.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F17">
            <summary>
            F17 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F18">
            <summary>
            F18 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F19">
            <summary>
            F19 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F20">
            <summary>
            F20 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F21">
            <summary>
            F21 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F22">
            <summary>
            F22 key, (PPC only) Key used to lock device.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F23">
            <summary>
            F23 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.F24">
            <summary>
            F24 key  
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LSHIFT">
            <summary>
            Left SHIFT key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RSHIFT">
            <summary>
            Right SHIFT key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LCONTROL">
            <summary>
            Left CONTROL key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RCONTROL">
            <summary>
            Right CONTROL key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LMENU">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.RMENU">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes.
            The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information,
            see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:WinUtilities.VKey.ATTN">
            <summary>Attn key</summary>
        </member>
        <member name="F:WinUtilities.VKey.CRSEL">
            <summary>CrSel key</summary>
        </member>
        <member name="F:WinUtilities.VKey.EXSEL">
            <summary>ExSel key</summary>
        </member>
        <member name="F:WinUtilities.VKey.EREOF">
            <summary>Erase EOF key</summary>
        </member>
        <member name="F:WinUtilities.VKey.PLAY">
            <summary>Play key</summary>
        </member>
        <member name="F:WinUtilities.VKey.ZOOM">
            <summary>Zoom key</summary>
        </member>
        <member name="F:WinUtilities.VKey.NONAME">
            <summary>Reserved</summary>
        </member>
        <member name="F:WinUtilities.VKey.PA1">
            <summary>PA1 key</summary>
        </member>
        <member name="F:WinUtilities.VKey.OEM_CLEAR">
            <summary>Clear key</summary>
        </member>
        <member name="T:WinUtilities.ScanCode">
            <summary>Enum of key scan codes.</summary>
        </member>
        <member name="T:WinUtilities.WinAPI">
            <summary>Access to a variety of native Windows API calls, structures, enums and some custom macros</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.SetParent(System.IntPtr,System.IntPtr)">
            <summary>Changes the parent window of the specified child window</summary>
            <param name="hwndChild">A handle to the child window</param>
            <param name="hwndParent">A handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window. If this parameter is HWND_MESSAGE, the child window becomes a message-only window.</param>
            <remarks><a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setparent"></a></remarks>
        </member>
        <member name="M:WinUtilities.WinAPI.ClipCursor(System.IntPtr)">
            <summary>Only pass IntPtr.Zero as an argument.</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.MapVirtualKey(WinUtilities.ScanCode)">
            <summary>Macro that maps a scan code to a virtual key by <see cref="F:WinUtilities.WinAPI.KeyMapFlags.ScanCode_to_VirtualKeyEx"/></summary>
        </member>
        <member name="M:WinUtilities.WinAPI.MapVirtualKey(WinUtilities.VKey)">
            <summary>Macro that maps a virtual key to a scan code by <see cref="F:WinUtilities.WinAPI.KeyMapFlags.VirtualKey_to_ScanCode"/></summary>
        </member>
        <member name="M:WinUtilities.WinAPI.MapVirtualKeyChar(WinUtilities.ScanCode)">
            <summary>Macro that maps a scan code to a char by <see cref="F:WinUtilities.WinAPI.KeyMapFlags.ScanCode_to_Char"/></summary>
        </member>
        <member name="M:WinUtilities.WinAPI.GetRegionDataManaged(System.IntPtr)">
            <summary>Tries to retrieve Region data. Getting all rects doesn't work.</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.GetPidFromHwnd(System.IntPtr)">
            <summary>Get process id from a window handle</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.GetClassFromHwnd(System.IntPtr)">
            <summary>Get class name from a window handle</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.GetPathFromPid(System.UInt32)">
            <summary>Get exe path from a window handle</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.GetExeNameFromPath(System.String)">
            <summary>Get the name of the exe file from it's full path</summary>
        </member>
        <member name="M:WinUtilities.WinAPI.GetExeNameFromPid(System.UInt32)">
            <summary>Get the name of the exe file from a process id</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.KeyMapFlags.VirtualKey_to_ScanCode">
            <summary>The uCode parameter is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.KeyMapFlags.ScanCode_to_VirtualKey">
            <summary>The uCode parameter is a scan code and is translated into a virtual-key code that does not distinguish between left- and right-hand keys. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.KeyMapFlags.ScanCode_to_Char">
            <summary>The uCode parameter is a virtual-key code and is translated into an unshifted character value in the low order word of the return value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.KeyMapFlags.ScanCode_to_VirtualKeyEx">
            <summary>The uCode parameter is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand keys. If there is no translation, the function returns 0.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.ByteAlignClient">
            <summary>Aligns the window's client area on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.ByteAlignWindow">
            <summary>Aligns the window on a byte boundary (in the x direction). This style affects the width of the window and its horizontal placement on the display.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.ClassDC">
            <summary>
            Allocates one device context to be shared by all windows in the class.
            Because window classes are process specific, it is possible for multiple threads of an application to create a window of the same class.
            It is also possible for the threads to attempt to use the device context simultaneously. When this happens, the system allows only one thread to successfully finish its drawing operation.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.DoubleClicks">
            <summary>Sends a double-click message to the window procedure when the user double-clicks the mouse while the cursor is within a window belonging to the class.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.DropShadow">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through SPI_SETDROPSHADOW.
            Typically, this is enabled for small, short-lived windows such as menus to emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.GlobalClass">
            <summary>Indicates that the window class is an application global class. For more information, see the "Application Global Classes" section of About Window Classes.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.HorizontalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the width of the client area.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.NoClose">
            <summary>Disables Close on the window menu.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.OwnDC">
            <summary>Allocates a unique device context for each window in the class.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.ParentDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child can draw on the parent.
            A window with the CS_PARENTDC style bit receives a regular device context from the system's cache of device contexts.
            It does not give the child the parent's device context or device context settings. Specifying CS_PARENTDC enhances an application's performance.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.SaveBits">
            <summary>
            Saves, as a bitmap, the portion of the screen image obscured by a window of this class.
            When the window is removed, the system uses the saved bitmap to restore the screen image, including other windows that were obscured.
            Therefore, the system does not send WM_PAINT messages to windows that were obscured if the memory used by the bitmap has not been discarded and if other screen actions have not invalidated the stored image.
            This style is useful for small windows (for example, menus or dialog boxes) that are displayed briefly and then removed before other screen activity takes place.
            This style increases the time required to display the window, because the system must first allocate memory to store the bitmap.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.ClassStyles.VerticalRedraw">
            <summary>Redraws the entire window if a movement or size adjustment changes the height of the client area.</summary>
        </member>
        <member name="T:WinUtilities.WinAPI.WH">
            <summary>Enum of Windows Hooks</summary>
        </member>
        <member name="T:WinUtilities.WinAPI.SM">
            <summary>Enum of System Metrics</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.ARRANGE">
            <summary>
            The flags that specify how the system arranged minimized windows. For more information, see the Remarks section in this topic.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CLEANBOOT">
            <summary>
            The value that specifies how the system is started:
            0 Normal boot
            1 Fail-safe boot
            2 Fail-safe with network boot
            A fail-safe boot (also called SafeBoot, Safe Mode, or Clean Boot) bypasses the user startup files.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CMONITORS">
            <summary>
            The number of display monitors on a desktop. For more information, see the Remarks section in this topic.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CMOUSEBUTTONS">
            <summary>
            The number of buttons on a mouse, or zero if no mouse is installed.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXBORDER">
            <summary>
            The width of a window border, in pixels. This is equivalent to the CXEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXCURSOR">
            <summary>
            The width of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXDLGFRAME">
            <summary>
            This value is the same as CXFIXEDFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXDOUBLECLK">
            <summary>
            The width of the rectangle around the location of a first click in a double-click sequence, in pixels. ,
            The second click must occur within the rectangle that is defined by CXDOUBLECLK and CYDOUBLECLK for the system
            to consider the two clicks a double-click. The two clicks must also occur within a specified time.
            To set the width of the double-click rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKWIDTH.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXDRAG">
            <summary>
            The number of pixels on either side of a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from the left of the mouse-down point and added to the right of it.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXEDGE">
            <summary>
            The width of a 3-D border, in pixels. This metric is the 3-D counterpart of CXBORDER.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            CXFIXEDFRAME is the height of the horizontal border, and CYFIXEDFRAME is the width of the vertical border.
            This value is the same as CXDLGFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXFOCUSBORDER">
            <summary>
            The width of the left and right edges of the focus rectangle that the DrawFocusRectdraws.
            This value is in pixels.
            Windows 2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXFRAME">
            <summary>
            This value is the same as CXSIZEFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXFULLSCREEN">
            <summary>
            The width of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen that is not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfofunction with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXHSCROLL">
            <summary>
            The width of the arrow bitmap on a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXHTHUMB">
            <summary>
            The width of the thumb box in a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXICON">
            <summary>
            The default width of an icon, in pixels. The LoadIcon function can load only icons with the dimensions
            that CXICON and CYICON specifies.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXICONSPACING">
            <summary>
            The width of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size
            CXICONSPACING by CYICONSPACING when arranged. This value is always greater than or equal to CXICON.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMAXIMIZED">
            <summary>
            The default width, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMAXTRACK">
            <summary>
            The default maximum width of a window that has a caption and sizing borders, in pixels.
            This metric refers to the entire desktop. The user cannot drag the window frame to a size larger than these dimensions.
            A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMENUCHECK">
            <summary>
            The width of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMENUSIZE">
            <summary>
            The width of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMIN">
            <summary>
            The minimum width of a window, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMINIMIZED">
            <summary>
            The width of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMINSPACING">
            <summary>
            The width of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to CXMINIMIZED.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXMINTRACK">
            <summary>
            The minimum tracking width of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXPADDEDBORDER">
            <summary>
            The amount of border padding for captioned windows, in pixels. Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXSCREEN">
            <summary>
            The width of the screen of the primary display monitor, in pixels. This is the same value obtained by calling 
            GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, HORZRES).
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXSIZE">
            <summary>
            The width of a button in a window caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            CXSIZEFRAME is the width of the horizontal border, and CYSIZEFRAME is the height of the vertical border.
            This value is the same as CXFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXSMICON">
            <summary>
            The recommended width of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXSMSIZE">
            <summary>
            The width of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXVIRTUALSCREEN">
            <summary>
            The width of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The XVIRTUALSCREEN metric is the coordinates for the left side of the virtual screen.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CXVSCROLL">
            <summary>
            The width of a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYBORDER">
            <summary>
            The height of a window border, in pixels. This is equivalent to the CYEDGE value for windows with the 3-D look.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYCAPTION">
            <summary>
            The height of a caption area, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYCURSOR">
            <summary>
            The height of a cursor, in pixels. The system cannot create cursors of other sizes.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYDLGFRAME">
            <summary>
            This value is the same as CYFIXEDFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYDOUBLECLK">
            <summary>
            The height of the rectangle around the location of a first click in a double-click sequence, in pixels.
            The second click must occur within the rectangle defined by CXDOUBLECLK and CYDOUBLECLK for the system to consider
            the two clicks a double-click. The two clicks must also occur within a specified time. To set the height of the double-click
            rectangle, call SystemParametersInfo with SPI_SETDOUBLECLKHEIGHT.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYDRAG">
            <summary>
            The number of pixels above and below a mouse-down point that the mouse pointer can move before a drag operation begins.
            This allows the user to click and release the mouse button easily without unintentionally starting a drag operation.
            If this value is negative, it is subtracted from above the mouse-down point and added below it.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYEDGE">
            <summary>
            The height of a 3-D border, in pixels. This is the 3-D counterpart of CYBORDER.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYFIXEDFRAME">
            <summary>
            The thickness of the frame around the perimeter of a window that has a caption but is not sizable, in pixels.
            CXFIXEDFRAME is the height of the horizontal border, and CYFIXEDFRAME is the width of the vertical border.
            This value is the same as CYDLGFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYFOCUSBORDER">
            <summary>
            The height of the top and bottom edges of the focus rectangle drawn byDrawFocusRect.
            This value is in pixels.
            Windows 2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYFRAME">
            <summary>
            This value is the same as CYSIZEFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYFULLSCREEN">
            <summary>
            The height of the client area for a full-screen window on the primary display monitor, in pixels.
            To get the coordinates of the portion of the screen not obscured by the system taskbar or by application desktop toolbars,
            call the SystemParametersInfo function with the SPI_GETWORKAREA value.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYHSCROLL">
            <summary>
            The height of a horizontal scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYICON">
            <summary>
            The default height of an icon, in pixels. The LoadIcon function can load only icons with the dimensions CXICON and CYICON.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYICONSPACING">
            <summary>
            The height of a grid cell for items in large icon view, in pixels. Each item fits into a rectangle of size
            CXICONSPACING by CYICONSPACING when arranged. This value is always greater than or equal to CYICON.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYKANJIWINDOW">
            <summary>
            For double byte character set versions of the system, this is the height of the Kanji window at the bottom of the screen, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMAXIMIZED">
            <summary>
            The default height, in pixels, of a maximized top-level window on the primary display monitor.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMAXTRACK">
            <summary>
            The default maximum height of a window that has a caption and sizing borders, in pixels. This metric refers to the entire desktop.
            The user cannot drag the window frame to a size larger than these dimensions. A window can override this value by processing
            the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMENU">
            <summary>
            The height of a single-line menu bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMENUCHECK">
            <summary>
            The height of the default menu check-mark bitmap, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMENUSIZE">
            <summary>
            The height of menu bar buttons, such as the child window close button that is used in the multiple document interface, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMIN">
            <summary>
            The minimum height of a window, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMINIMIZED">
            <summary>
            The height of a minimized window, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMINSPACING">
            <summary>
            The height of a grid cell for a minimized window, in pixels. Each minimized window fits into a rectangle this size when arranged.
            This value is always greater than or equal to CYMINIMIZED.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYMINTRACK">
            <summary>
            The minimum tracking height of a window, in pixels. The user cannot drag the window frame to a size smaller than these dimensions.
            A window can override this value by processing the WM_GETMINMAXINFO message.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYSCREEN">
            <summary>
            The height of the screen of the primary display monitor, in pixels. This is the same value obtained by calling 
            GetDeviceCaps as follows: GetDeviceCaps( hdcPrimaryMonitor, VERTRES).
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYSIZE">
            <summary>
            The height of a button in a window caption or title bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYSIZEFRAME">
            <summary>
            The thickness of the sizing border around the perimeter of a window that can be resized, in pixels.
            CXSIZEFRAME is the width of the horizontal border, and CYSIZEFRAME is the height of the vertical border.
            This value is the same as CYFRAME.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYSMCAPTION">
            <summary>
            The height of a small caption, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYSMICON">
            <summary>
            The recommended height of a small icon, in pixels. Small icons typically appear in window captions and in small icon view.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYSMSIZE">
            <summary>
            The height of small caption buttons, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYVIRTUALSCREEN">
            <summary>
            The height of the virtual screen, in pixels. The virtual screen is the bounding rectangle of all display monitors.
            The YVIRTUALSCREEN metric is the coordinates for the top of the virtual screen.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYVSCROLL">
            <summary>
            The height of the arrow bitmap on a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.CYVTHUMB">
            <summary>
            The height of the thumb box in a vertical scroll bar, in pixels.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.DBCSENABLED">
            <summary>
            Nonzero if User32.dll supports DBCS; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.DEBUG">
            <summary>
            Nonzero if the debug version of User.exe is installed; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.DIGITIZER">
            <summary>
            Nonzero if the current operating system is Windows 7 or Windows Server 2008 R2 and the Tablet PC Input
            service is started; otherwise, 0. The return value is a bitmask that specifies the type of digitizer input supported by the device.
            For more information, see Remarks.
            Windows Server 2008, Windows Vista, and Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.IMMENABLED">
            <summary>
            Nonzero if Input Method Manager/Input Method Editor features are enabled; otherwise, 0.
            IMMENABLED indicates whether the system is ready to use a Unicode-based IME on a Unicode application.
            To ensure that a language-dependent IME works, check DBCSENABLED and the system ANSI code page.
            Otherwise the ANSI-to-Unicode conversion may not be performed correctly, or some components like fonts
            or registry settings may not be present.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MAXIMUMTOUCHES">
            <summary>
            Nonzero if there are digitizers in the system; otherwise, 0. MAXIMUMTOUCHES returns the aggregate maximum of the
            maximum number of contacts supported by every digitizer in the system. If the system has only single-touch digitizers,
            the return value is 1. If the system has multi-touch digitizers, the return value is the number of simultaneous contacts
            the hardware can provide. Windows Server 2008, Windows Vista, and Windows XP/2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MEDIACENTER">
            <summary>
            Nonzero if the current operating system is the Windows XP, Media Center Edition, 0 if not.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MENUDROPALIGNMENT">
            <summary>
            Nonzero if drop-down menus are right-aligned with the corresponding menu-bar item; 0 if the menus are left-aligned.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MIDEASTENABLED">
            <summary>
            Nonzero if the system is enabled for Hebrew and Arabic languages, 0 if not.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MOUSEPRESENT">
            <summary>
            Nonzero if a mouse is installed; otherwise, 0. This value is rarely zero, because of support for virtual mice and because
            some systems detect the presence of the port instead of the presence of a mouse.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MOUSEHORIZONTALWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a horizontal scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.MOUSEWHEELPRESENT">
            <summary>
            Nonzero if a mouse with a vertical scroll wheel is installed; otherwise 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.NETWORK">
            <summary>
            The least significant bit is set if a network is present; otherwise, it is cleared. The other bits are reserved for future use.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.PENWINDOWS">
            <summary>
            Nonzero if the Microsoft Windows for Pen computing extensions are installed; zero otherwise.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.REMOTECONTROL">
            <summary>
            This system metric is used in a Terminal Services environment to determine if the current Terminal Server session is
            being remotely controlled. Its value is nonzero if the current session is remotely controlled; otherwise, 0.
            You can use terminal services management tools such as Terminal Services Manager (tsadmin.msc) and shadow.exe to
            control a remote session. When a session is being remotely controlled, another user can view the contents of that session
            and potentially interact with it.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.REMOTESESSION">
            <summary>
            This system metric is used in a Terminal Services environment. If the calling process is associated with a Terminal Services
            client session, the return value is nonzero. If the calling process is associated with the Terminal Services console session,
            the return value is 0.
            Windows Server 2003 and Windows XP:  The console session is not necessarily the physical console.
            For more information, seeWTSGetActiveConsoleSessionId.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SAMEDISPLAYFORMAT">
            <summary>
            Nonzero if all the display monitors have the same color format, otherwise, 0. Two displays can have the same bit depth,
            but different color formats. For example, the red, green, and blue pixels can be encoded with different numbers of bits,
            or those bits can be located in different places in a pixel color value.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SECURE">
            <summary>
            This system metric should be ignored; it always returns 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SERVERR2">
            <summary>
            The build number if the system is Windows Server 2003 R2; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SHOWSOUNDS">
            <summary>
            Nonzero if the user requires an application to present information visually in situations where it would otherwise present
            the information only in audible form; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SHUTTINGDOWN">
            <summary>
            Nonzero if the current session is shutting down; otherwise, 0. Windows 2000:  This value is not supported.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SLOWMACHINE">
            <summary>
            Nonzero if the computer has a low-end (slow) processor; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.STARTER">
            <summary>
            Nonzero if the current operating system is Windows 7 Starter Edition, Windows Vista Starter, or Windows XP Starter Edition; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.SWAPBUTTON">
            <summary>
            Nonzero if the meanings of the left and right mouse buttons are swapped; otherwise, 0.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.TABLETPC">
            <summary>
            Nonzero if the current operating system is the Windows XP Tablet PC edition or if the current operating system is Windows Vista
            or Windows 7 and the Tablet PC Input service is started; otherwise, 0. The DIGITIZER setting indicates the type of digitizer
            input supported by a device running Windows 7 or Windows Server 2008 R2. For more information, see Remarks.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.XVIRTUALSCREEN">
            <summary>
            The coordinates for the left side of the virtual screen. The virtual screen is the bounding rectangle of all display monitors.
            The CXVIRTUALSCREEN metric is the width of the virtual screen.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SM.YVIRTUALSCREEN">
            <summary>
            The coordinates for the top of the virtual screen. The virtual screen is the bounding rectangle of all display monitors.
            The CYVIRTUALSCREEN metric is the height of the virtual screen.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.RegionType.Error">
            <summary>Region does not exist or an error occurred.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.RegionType.Null">
            <summary>Region is empty.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.RegionType.Simple">
            <summary>Region consists of one rectangle.</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.RegionType.Complex">
            <summary>Region is a complex shape.</summary>
        </member>
        <member name="T:WinUtilities.WinAPI.FillRgnFlags">
            <summary>Documentation <a href="https://docs.microsoft.com/en-us/windows/win32/api/wingdi/nf-wingdi-setpolyfillmode">here</a></summary>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.AsyncWindowPos">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues,
            the system posts the request to the thread that owns the window. This prevents the calling thread from
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid
            contents of the client area are saved and copied back into the client area after the window is sized or
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent
            window uncovered as a result of the window being moved. When this flag is set, the application must
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoSize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.NoZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.WindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
        <member name="F:WinUtilities.WinAPI.AncestorFlags.GetParent">
            <summary>
            Retrieves the parent window. This does not include the owner, as it does with the GetParent function.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.AncestorFlags.GetRoot">
            <summary>
            Retrieves the root window by walking the chain of parent windows.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.AncestorFlags.GetRootOwner">
            <summary>
            Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.
            </summary>
        </member>
        <member name="T:WinUtilities.WinAPI.TernaryRasterOperations">
            <summary>
                Specifies a raster-operation code. These codes define how the color data for the
                source rectangle is to be combined with the color data for the destination
                rectangle to achieve the final color.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.SRCCOPY">
            <summary>dest = source</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.SRCPAINT">
            <summary>dest = source OR dest</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.SRCAND">
            <summary>dest = source AND dest</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.SRCINVERT">
            <summary>dest = source XOR dest</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.SRCERASE">
            <summary>dest = source AND (NOT dest)</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.NOTSRCCOPY">
            <summary>dest = (NOT source)</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.NOTSRCERASE">
            <summary>dest = (NOT src) AND (NOT dest)</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.MERGECOPY">
            <summary>dest = (source AND pattern)</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.MERGEPAINT">
            <summary>dest = (NOT source) OR dest</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.PATCOPY">
            <summary>dest = pattern</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.PATPAINT">
            <summary>dest = DPSnoo</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.PATINVERT">
            <summary>dest = pattern XOR dest</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.DSTINVERT">
            <summary>dest = (NOT dest)</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.BLACKNESS">
            <summary>dest = BLACK</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.WHITENESS">
            <summary>dest = WHITE</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.TernaryRasterOperations.CAPTUREBLT">
            <summary>
            Capture window as seen on screen.  This includes layered windows
            such as WPF windows with AllowsTransparency="true"
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.cbSize">
            <summary>Size of the structure in bytes</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.fMask">
            <summary>Mask of info to retrieve</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.min">
            <summary>Minimum scrolling position</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.max">
            <summary>Maximum scrolling position</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.nPage">
            <summary>Page size in device units</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.nPos">
            <summary>Position of the scrollbox, doesn't change while dragging</summary>
        </member>
        <member name="F:WinUtilities.WinAPI.SCROLLINFO.nTrackPos">
            <summary>Live position of the scrollbox while dragging</summary>
        </member>
        <member name="T:WinUtilities.WinAPI.MONITORINFOEX">
            <summary>
            The MONITORINFOEX structure contains information about a display monitor.
            The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.
            The MONITORINFOEX structure is a superset of the MONITORINFO structure. The MONITORINFOEX structure adds a string member to contain a name
            for the display monitor.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.MONITORINFOEX.Size">
            <summary>
            The size, in bytes, of the structure. Set this member to sizeof(MONITORINFOEX) (72) before calling the GetMonitorInfo function.
            Doing so lets the function determine the type of structure you are passing to it.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.MONITORINFOEX.Monitor">
            <summary>
            A RECT structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates.
            Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.MONITORINFOEX.WorkArea">
            <summary>
            A RECT structure that specifies the work area rectangle of the display monitor that can be used by applications,
            expressed in virtual-screen coordinates. Windows uses this rectangle to maximize an application on the monitor.
            The rest of the area in rcMonitor contains system windows such as the task bar and side bars.
            Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.
            </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.MONITORINFOEX.Flags">
             <summary>
             The attributes of the display monitor.
            
             This member can be the following value:
               1 : MONITORINFOF_PRIMARY
             </summary>
        </member>
        <member name="F:WinUtilities.WinAPI.MONITORINFOEX.DeviceName">
            <summary>
            A string that specifies the device name of the monitor being used. Most applications have no use for a display monitor name,
            and so can save some bytes by using a MONITORINFO structure.
            </summary>
        </member>
        <member name="T:WinUtilities.DeviceHook">
            <summary>Class for subscribing to mouse and keyboard events</summary>
        </member>
        <member name="P:WinUtilities.DeviceHook.KeyboardHookRunning">
            <summary>Receiving keyboard events</summary>
        </member>
        <member name="P:WinUtilities.DeviceHook.MouseHookRunning">
            <summary>Receiving mouse events</summary>
        </member>
        <member name="P:WinUtilities.DeviceHook.KeyboardHookEnabled">
            <summary>Specify if hooking keyboard is allowed</summary>
        </member>
        <member name="P:WinUtilities.DeviceHook.MouseHookEnabled">
            <summary>Specify if hooking mouse is allowed</summary>
        </member>
        <member name="E:WinUtilities.DeviceHook.InputEvent">
            <summary>Subscribe to all hook events</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.StartHooks">
            <summary>Start hooking device events</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.StopHooks">
            <summary>Stop hooking device events</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.RestartHooks">
            <summary>Restart device hooks</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.StartKeyboardHook">
            <summary>Start hooking keyboard</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.StopKeyboardHook">
            <summary>Stop hooking keyboard</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.StartMouseHook">
            <summary>Start hooking mouse</summary>
        </member>
        <member name="M:WinUtilities.DeviceHook.StopMouseHook">
            <summary>Stop hooking mouse</summary>
        </member>
        <member name="T:WinUtilities.IDeviceInput">
            <summary>Interface that represents keyboard or mouse input</summary>
        </member>
        <member name="P:WinUtilities.IDeviceInput.Key">
            <summary>The inputted key</summary>
        </member>
        <member name="P:WinUtilities.IDeviceInput.State">
            <summary>The inputted key's state</summary>
        </member>
        <member name="P:WinUtilities.IDeviceInput.Injected">
            <summary>Specifies if the key was emitted by a process</summary>
        </member>
        <member name="P:WinUtilities.IDeviceInput.InjectedLower">
            <summary>Specifies if the key was emitted by a lower integrity level process</summary>
        </member>
        <member name="P:WinUtilities.IDeviceInput.ExtraInfo">
            <summary>Extra information given by the event source</summary>
        </member>
        <member name="P:WinUtilities.IDeviceInput.IsMouse">
            <summary>Specifies if the event is a mouse key</summary>
        </member>
        <member name="T:WinUtilities.KeyboardInput">
            <summary>Represents a keyboard input event</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.Key">
            <summary>The inputted key</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.SC">
            <summary>The inputted key's scan code</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.State">
            <summary>The inputted key's state</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.SysKey">
            <summary>Documentation <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-syskeydown">here</a></summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.Extended">
            <summary>Specifies if the key has the extended property</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.Injected">
            <summary>Specifies if the key was emitted by a process</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.InjectedLower">
            <summary>Specifies if the key was emitted by a lower integrity level process</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.AltDown">
            <summary>Specifies if an alt key was down while emitting event</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.Release">
            <summary>Specifies the key was released</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.ExtraInfo">
            <summary>Extra information given by the event source</summary>
        </member>
        <member name="P:WinUtilities.KeyboardInput.IsMouse">
            <summary>Specifies if the event was a mouse key. Always false.</summary>
        </member>
        <member name="M:WinUtilities.KeyboardInput.#ctor(System.IntPtr,System.IntPtr)">
            <summary>Parse a new keyboard event from a hooked windows message</summary>
        </member>
        <member name="M:WinUtilities.KeyboardInput.ToString">
            <summary>Return the object as a string that shows the main information</summary>
        </member>
        <member name="T:WinUtilities.MouseInput">
            <summary>Represents a mouse input event</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.Key">
            <summary>The inputted key</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.State">
            <summary>The inputted key's state</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.Pos">
            <summary>The screen location of where the mouse event occurred</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.Injected">
            <summary>Specifies if the key was emitted by a process</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.InjectedLower">
            <summary>Specifies if the key was emitted by a lower integrity level process</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.ExtraInfo">
            <summary>Extra information given by the event source</summary>
        </member>
        <member name="P:WinUtilities.MouseInput.IsMouse">
            <summary>Specifies if the event was a mouse key. Always true.</summary>
        </member>
        <member name="M:WinUtilities.MouseInput.#ctor(System.IntPtr,System.IntPtr)">
            <summary>Parse a new mouse event from a hooked windows message</summary>
        </member>
        <member name="M:WinUtilities.MouseInput.ToString">
            <summary>Return the object as a string that shows the main information</summary>
        </member>
        <member name="T:WinUtilities.KeyState">
            <summary>A combination of a key and its state</summary>
        </member>
        <member name="P:WinUtilities.KeyState.Key">
            <summary>The key whose state is recorded</summary>
        </member>
        <member name="P:WinUtilities.KeyState.State">
            <summary>The state of the key</summary>
        </member>
        <member name="M:WinUtilities.KeyState.#ctor(WinUtilities.Key,System.Boolean)">
            <summary>Create a new <see cref="T:WinUtilities.KeyState"/> object</summary>
        </member>
        <member name="T:WinUtilities.EnhancedKey">
            <summary>Extension methods for the enhanced Key enum</summary>
        </member>
        <member name="P:WinUtilities.EnhancedKey.KeyMap">
            <summary>Map virtual key codes to the Key enum</summary>
        </member>
        <member name="P:WinUtilities.EnhancedKey.KeyExtendedMap">
            <summary>Map extended versions of virtual key codes to the Key enum</summary>
        </member>
        <member name="P:WinUtilities.EnhancedKey.StringToKey">
            <summary>Map strings to the Key enum</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.HasAny(WinUtilities.Key,WinUtilities.Key)">
            <summary>Check if key has any of the flags given</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.HasAll(WinUtilities.Key,WinUtilities.Key)">
            <summary>Check if key has all of the flags given</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsKey(WinUtilities.Key)">
            <summary>Check if the Key value is a key instead of a flag etc.</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsFlag(WinUtilities.Key)">
            <summary>Check if the Key value is a flag</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsMask(WinUtilities.Key)">
            <summary>Check if the Key value is a mask</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsCustom(WinUtilities.Key)">
            <summary>Check if the Key value is a custom entry</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsModifier(WinUtilities.Key)">
            <summary>Check if the key is a modifier</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsMouse(WinUtilities.Key)">
            <summary>Check if the key is a mouse key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsNumpad(WinUtilities.Key)">
            <summary>Check if the key is a numpad key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsScroll(WinUtilities.Key)">
            <summary>Check if the key represents a scroll event</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsMouseMove(WinUtilities.Key)">
            <summary>Check if the Key value represents mouse movement</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsNumber(WinUtilities.Key)">
            <summary>Check if the key is a number</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsExtended(WinUtilities.Key)">
            <summary>Check if the key is has the extended property</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsMedia(WinUtilities.Key)">
            <summary>Check if the key is a media key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsChar(WinUtilities.Key)">
            <summary>Check if the key produces a character when typed</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsStateless(WinUtilities.Key)">
            <summary>Check if the key is stateless. Stateless keys have no up event.</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsToggle(WinUtilities.Key)">
            <summary>Check if the key is a toggleable key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsNone(WinUtilities.Key)">
            <summary>Check if the key is the None key. Represents a fail or null state.</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsKeyboard(WinUtilities.Key)">
            <summary>Check if the key is a keyboard key instead of a mouse or a custom key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsModifierFlag(WinUtilities.Key)">
            <summary>Check if the Key value is a modifier flag</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsShift(WinUtilities.Key)">
            <summary>Check if the key is a left or right shift key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsCtrl(WinUtilities.Key)">
            <summary>Check if the key is a left or right control key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsWin(WinUtilities.Key)">
            <summary>Check if the key is a left or right win key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsAlt(WinUtilities.Key)">
            <summary>Check if the key is a left or right alt key</summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.AsVirtualKey(WinUtilities.Key)">
            <summary>Get the <see cref="T:WinUtilities.VKey"/> equivalent of this <see cref="T:WinUtilities.Key"/></summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.AsScanCode(WinUtilities.Key)">
            <summary>Get the <see cref="T:WinUtilities.ScanCode"/> equivalent of this <see cref="T:WinUtilities.Key"/></summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.AsVirtualKey(WinUtilities.ScanCode)">
            <summary>Get the <see cref="T:WinUtilities.VKey"/> equivalent of this <see cref="T:WinUtilities.ScanCode"/></summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.AsScanCode(WinUtilities.VKey)">
            <summary>Get the <see cref="T:WinUtilities.ScanCode"/> equivalent of this <see cref="T:WinUtilities.VKey"/></summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.AsCustom(WinUtilities.ScanCode)">
            <summary>Get the <see cref="T:WinUtilities.Key"/> equivalent of this <see cref="T:WinUtilities.ScanCode"/></summary>
        </member>
        <member name="M:WinUtilities.EnhancedKey.AsCustom(WinUtilities.VKey,System.Boolean)">
            <summary>Get the <see cref="T:WinUtilities.Key"/> equivalent of this <see cref="T:WinUtilities.VKey"/>. If an extended key is not found, a non-extended version is returned if possible.</summary>
            <param name="key">The <see cref="T:WinUtilities.VKey"/> to cast into a <see cref="T:WinUtilities.ScanCode"/></param>
            <param name="extended">Set true to prioritize the extended version of the key (Example: Enter vs NumpadEnter). Returns non-extended version as fallback if not found and vice versa.</param>
        </member>
        <member name="M:WinUtilities.EnhancedKey.IsExtended(WinUtilities.ScanCode)">
            <summary>Check if the <see cref="T:WinUtilities.ScanCode"/> is an extended key</summary>
        </member>
        <member name="T:WinUtilities.Key">
            <summary>An enhanced list of Virtual Keys.</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Custom">
            <summary>Flag for custom defined keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Modifier">
            <summary>Flag for modifier keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Mouse">
            <summary>Flag for mouse keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Numpad">
            <summary>Flag for numpad keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Scroll">
            <summary>Flag for scroll keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Number">
            <summary>Flag for number keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Extended">
            <summary>Flag for extended keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Media">
            <summary>Flag for media keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Char">
            <summary>Flag for keys that produce visible characters</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Stateless">
            <summary>Flag for stateless keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Toggle">
            <summary>Flag for toggle keys</summary>
        </member>
        <member name="F:WinUtilities.Key.F_Special">
            <summary>Flag for keys that are out of the norm somehow</summary>
        </member>
        <member name="F:WinUtilities.Key.Shift">
            <summary>Flag for shift keys</summary>
        </member>
        <member name="F:WinUtilities.Key.Ctrl">
            <summary>Flag for ctrl keys</summary>
        </member>
        <member name="F:WinUtilities.Key.Win">
            <summary>Flag for win keys</summary>
        </member>
        <member name="F:WinUtilities.Key.Alt">
            <summary>Flag for alt keys</summary>
        </member>
        <member name="F:WinUtilities.Key.M_FlagMask">
            <summary>Mask for the flag bits</summary>
        </member>
        <member name="F:WinUtilities.Key.M_KeyMask">
            <summary>Mask for the Virtual Key</summary>
        </member>
        <member name="F:WinUtilities.Key.NoMapping">
            <summary>This key doesn't (shouldn't) do anything</summary>
        </member>
        <member name="F:WinUtilities.Key.LButton">
            <summary>Left mouse button</summary>
        </member>
        <member name="F:WinUtilities.Key.RButton">
            <summary>Right mouse button</summary>
        </member>
        <member name="F:WinUtilities.Key.MButton">
            <summary>Middle mouse button</summary>
        </member>
        <member name="F:WinUtilities.Key.XButton1">
            <summary>Extra mouse button 1</summary>
        </member>
        <member name="F:WinUtilities.Key.XButton2">
            <summary>Extra mouse button 2</summary>
        </member>
        <member name="F:WinUtilities.Key.D0">
            <summary>Digit 0</summary>
        </member>
        <member name="F:WinUtilities.Key.D1">
            <summary>Digit 1</summary>
        </member>
        <member name="F:WinUtilities.Key.D2">
            <summary>Digit 2</summary>
        </member>
        <member name="F:WinUtilities.Key.D3">
            <summary>Digit 3</summary>
        </member>
        <member name="F:WinUtilities.Key.D4">
            <summary>Digit 4</summary>
        </member>
        <member name="F:WinUtilities.Key.D5">
            <summary>Digit 5</summary>
        </member>
        <member name="F:WinUtilities.Key.D6">
            <summary>Digit 6</summary>
        </member>
        <member name="F:WinUtilities.Key.D7">
            <summary>Digit 7</summary>
        </member>
        <member name="F:WinUtilities.Key.D8">
            <summary>Digit 8</summary>
        </member>
        <member name="F:WinUtilities.Key.D9">
            <summary>Digit 9</summary>
        </member>
        <member name="F:WinUtilities.Key.Left">
            <summary>Left arrow key</summary>
        </member>
        <member name="F:WinUtilities.Key.Right">
            <summary>Right arrow key</summary>
        </member>
        <member name="F:WinUtilities.Key.Up">
            <summary>Up arrow key</summary>
        </member>
        <member name="F:WinUtilities.Key.Down">
            <summary>Down arrow key</summary>
        </member>
        <member name="F:WinUtilities.Key.LShift">
            <summary>Left shift key</summary>
        </member>
        <member name="F:WinUtilities.Key.RShift">
            <summary>Right shift key</summary>
        </member>
        <member name="F:WinUtilities.Key.LCtrl">
            <summary>Left control key</summary>
        </member>
        <member name="F:WinUtilities.Key.RCtrl">
            <summary>Right control key</summary>
        </member>
        <member name="F:WinUtilities.Key.LAlt">
            <summary>Left alt key</summary>
        </member>
        <member name="F:WinUtilities.Key.RAlt">
            <summary>Right alt key</summary>
        </member>
        <member name="F:WinUtilities.Key.LWin">
            <summary>Left win key</summary>
        </member>
        <member name="F:WinUtilities.Key.RWin">
            <summary>Right win key</summary>
        </member>
        <member name="F:WinUtilities.Key.App">
            <summary>Context menu key</summary>
        </member>
        <member name="F:WinUtilities.Key.Context">
            <summary>Context menu key</summary>
        </member>
        <member name="F:WinUtilities.Key.PrintScrn">
            <summary>Print screen key</summary>
        </member>
        <member name="F:WinUtilities.Key.Pause">
            <summary>Pause break key</summary>
        </member>
        <member name="F:WinUtilities.Key.BrowserBack">
            <summary>The general back key</summary>
        </member>
        <member name="F:WinUtilities.Key.BrowserForward">
            <summary>The general forward key</summary>
        </member>
        <member name="F:WinUtilities.Key.MediaPlay">
            <summary>Media play pause key</summary>
        </member>
        <member name="F:WinUtilities.Key.Umlaut">
            <summary>The ¨ key</summary>
        </member>
        <member name="F:WinUtilities.Key.Apostrophe">
            <summary>The ' key</summary>
        </member>
        <member name="F:WinUtilities.Key.Ö">
            <summary>The Ö key</summary>
        </member>
        <member name="F:WinUtilities.Key.Tilde">
            <summary>The ´ key</summary>
        </member>
        <member name="F:WinUtilities.Key.Section">
            <summary>The § key</summary>
        </member>
        <member name="F:WinUtilities.Key.Å">
            <summary>The Å key</summary>
        </member>
        <member name="F:WinUtilities.Key.Ä">
            <summary>The Ä key</summary>
        </member>
        <member name="F:WinUtilities.Key.Less">
            <summary>The &lt; key</summary>
        </member>
        <member name="F:WinUtilities.Key.None">
            <summary>This represents a key that does not exist</summary>
        </member>
        <member name="F:WinUtilities.Key.Unknown">
            <summary>This represents a key that was not recognized</summary>
        </member>
        <member name="F:WinUtilities.Key.WheelLeft">
            <summary>Mouse wheel left</summary>
        </member>
        <member name="F:WinUtilities.Key.WheelRight">
            <summary>Mouse wheel right</summary>
        </member>
        <member name="F:WinUtilities.Key.WheelUp">
            <summary>Mouse wheel up</summary>
        </member>
        <member name="F:WinUtilities.Key.WheelDown">
            <summary>Mouse wheel down</summary>
        </member>
        <member name="F:WinUtilities.Key.MouseMove">
            <summary>Mouse movement</summary>
        </member>
        <member name="T:WinUtilities.SendMode">
            <summary>Specifies what method is used to send the input</summary>
        </member>
        <member name="F:WinUtilities.SendMode.Input">
            <summary>Uses the windows SendInput API. Fast and reliable, but rejected by certain applications.</summary>
        </member>
        <member name="F:WinUtilities.SendMode.Event">
            <summary>Uses the event API. Slower and less reliable, but more compatible with some applications.</summary>
        </member>
        <member name="F:WinUtilities.SendMode.Control">
            <summary>Sends key messages directly. Least reliable, but might be able to send input to background windows directly.</summary>
        </member>
        <member name="T:WinUtilities.Input">
            <summary>Class for sending native windows input</summary>
        </member>
        <member name="P:WinUtilities.Input.ParseOpen">
            <summary>The text character for parsing special input when sending text. Default is '['.</summary>
        </member>
        <member name="P:WinUtilities.Input.ParseClose">
            <summary>The text character for parsing special input when sending text. Default is ']'.</summary>
        </member>
        <member name="P:WinUtilities.Input.ShortModifiers">
            <summary>List of short modifier symbols used in parsed string input</summary>
        </member>
        <member name="M:WinUtilities.Input.FromMouseEvent(WinUtilities.WM,System.Int32)">
            <summary>Retrieve the Key equivalent from a <see cref="T:WinUtilities.WM"/> message</summary>
        </member>
        <member name="M:WinUtilities.Input.GetKeyState(WinUtilities.Key)">
            <summary>Get the logical state of a key. Does not differentiate between extended and non-extended keys</summary>
        </member>
        <member name="M:WinUtilities.Input.Send(System.String,WinUtilities.SendMode)">
            <summary>Send text input.</summary>
            <remarks>
            The <paramref name="text"/> is parsed for special input when between [ and ]. This behaviour can be escaped with [[ and ]].
            <para/>Any entity, a single character or a special input [], can be preceded with a modifier set like: [+!][Enter] -> Shift + Alt + Enter -OR- [#]p -> Win + P.
            <para/>The modifiers supported are RShift(+), RCtrl(^), LAlt(!) or RWin(#). 
            <para/>The general layout of normal special input is [key up/down (amount) text] where anything besides the key can be omitted or included as needed.
            <para/>Specifying up or down will send only that event, instead of sending both down and up events.
            <para/>Specifying 'text' in the special input sends the 'key' as text instead. For example [Enter 5] sends the Enter key five times but [Enter 5 text] sends the text 'Enter' 5 times.
            <para/>While using 'text' the 'key' part must not contain any spaces. This makes sending long text difficult, but is useful in sending a specific symbol many times, like [§ 10 text].
            </remarks>
        </member>
        <member name="M:WinUtilities.Input.SendRaw(System.String,WinUtilities.SendMode)">
            <summary>Send raw text input</summary>
        </member>
        <member name="M:WinUtilities.Input.Send(System.Char,WinUtilities.SendMode)">
            <summary>Send char input</summary>
        </member>
        <member name="M:WinUtilities.Input.Send(System.String)">
            <summary>Send text in Input mode.</summary>
            <remarks>
            The <paramref name="text"/> is parsed for special input when between [ and ]. This behaviour can be escaped with [[ and ]].
            <para/>Any entity, a single character or a special input [], can be preceded with a modifier set like: [+!][Enter] -> Shift + Alt + Enter -OR- [#]p -> Win + P.
            <para/>The modifiers supported are RShift(+), RCtrl(^), LAlt(!) or RWin(#). 
            <para/>The general layout of normal special input is [key up/down (amount) text] where anything besides the key can be omitted or included as needed.
            <para/>Specifying up or down will send only that event, instead of sending both down and up events.
            <para/>Specifying 'text' in the special input sends the 'key' as text instead. For example [Enter 5] sends the Enter key five times but [Enter 5 text] sends the text 'Enter' 5 times.
            <para/>While using 'text' the 'key' part must not contain any spaces. This makes sending long text difficult, but is useful in sending a specific symbol many times, like [§ 10 text].
            </remarks>
        </member>
        <member name="M:WinUtilities.Input.Send(System.Char[])">
            <summary>Send chars in Input mode</summary>
        </member>
        <member name="M:WinUtilities.Input.Send(WinUtilities.Key[])">
            <summary>Send keys in Input mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendDown(WinUtilities.Key[])">
            <summary>Send down keys in Input mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendUp(WinUtilities.Key[])">
            <summary>Send up keys in Input mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendRaw(System.String)">
            <summary>Send raw text in Input mode. This string is not parsed in any way before sending.</summary>
        </member>
        <member name="M:WinUtilities.Input.Scroll(WinUtilities.Key,System.Int32)">
            <summary>Send a scroll event in Input mode</summary>
        </member>
        <member name="M:WinUtilities.Input.MouseMoveRelative(System.Int32,System.Int32)">
            <summary>Send relative mouse movement in Input mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendGame(WinUtilities.Key[])">
            <summary>Send lenghtened key presses that are easily recognized by game like applications in Input mode. Up event is delayed by 20 ms.</summary>
        </member>
        <member name="M:WinUtilities.Input.SendGame(System.Int32,WinUtilities.Key[])">
            <summary>Send lenghtened key presses that are easily recognized by game like applications in Input mode</summary>
            <param name="delay">The amount of time before the up event is sent</param>
            <param name="keys">The keys to send as input</param>
        </member>
        <member name="M:WinUtilities.Input.SendEvent(System.String)">
            <summary>Send text in Event mode.</summary>
            <remarks>
            The <paramref name="text"/> is parsed for special input when between [ and ]. This behaviour can be escaped with [[ and ]].
            <para/>Any entity, a single character or a special input [], can be preceded with a modifier set like: [+!][Enter] -> Shift + Alt + Enter -OR- [#]p -> Win + P.
            <para/>The modifiers supported are RShift(+), RCtrl(^), LAlt(!) or RWin(#). 
            <para/>The general layout of normal special input is [key up/down (amount) text] where anything besides the key can be omitted or included as needed.
            <para/>Specifying up or down will send only that event, instead of sending both down and up events.
            <para/>Specifying 'text' in the special input sends the 'key' as text instead. For example [Enter 5] sends the Enter key five times but [Enter 5 text] sends the text 'Enter' 5 times.
            <para/>While using 'text' the 'key' part must not contain any spaces. This makes sending long text difficult, but is useful in sending a specific symbol many times, like [§ 10 text].
            </remarks>
        </member>
        <member name="M:WinUtilities.Input.SendEvent(System.Char[])">
            <summary>Send chars in Event mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEvent(WinUtilities.Key[])">
            <summary>Send keys in Event mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEventDown(WinUtilities.Key[])">
            <summary>Send down keys in Event mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEventUp(WinUtilities.Key[])">
            <summary>Send up keys in Event mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEventRaw(System.String)">
            <summary>Send raw text in Event mode. This string is not parsed in any way before sending.</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEventGame(WinUtilities.Key[])">
            <summary>Send lenghtened key presses that are easily recognized by game like applications in Event mode. Up event is delayed by 20 ms.</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEventGame(System.Int32,WinUtilities.Key[])">
            <summary>Send lenghtened key presses that are easily recognized by game like applications in Event mode</summary>
            <param name="delay">The amount of time before the up event is sent</param>
            <param name="keys">The keys to send as input</param>
        </member>
        <member name="M:WinUtilities.Input.SendControl(WinUtilities.Window,System.String)">
            <summary>Send text in Control mode.</summary>
            <remarks>
            The <paramref name="text"/> is parsed for special input when between [ and ]. This behaviour can be escaped with [[ and ]].
            <para/>Any entity, a single character or a special input [], can be preceded with a modifier set like: [+!][Enter] -> Shift + Alt + Enter -OR- [#]p -> Win + P.
            <para/>The modifiers supported are RShift(+), RCtrl(^), LAlt(!) or RWin(#). 
            <para/>The general layout of normal special input is [key up/down (amount) text] where anything besides the key can be omitted or included as needed.
            <para/>Specifying up or down will send only that event, instead of sending both down and up events.
            <para/>Specifying 'text' in the special input sends the 'key' as text instead. For example [Enter 5] sends the Enter key five times but [Enter 5 text] sends the text 'Enter' 5 times.
            <para/>While using 'text' the 'key' part must not contain any spaces. This makes sending long text difficult, but is useful in sending a specific symbol many times, like [§ 10 text].
            </remarks>
        </member>
        <member name="M:WinUtilities.Input.SendControl(WinUtilities.Window,System.Char[])">
            <summary>Send chars in Control mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendControl(WinUtilities.Window,WinUtilities.Key[])">
            <summary>Send keys in Control mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendControlDown(WinUtilities.Window,WinUtilities.Key[])">
            <summary>Send down keys in Control mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendControlUp(WinUtilities.Window,WinUtilities.Key[])">
            <summary>Send up keys in Control mode</summary>
        </member>
        <member name="M:WinUtilities.Input.SendControlRaw(WinUtilities.Window,System.String)">
            <summary>Send raw text in Control mode. This string is not parsed in any way before sending.</summary>
        </member>
        <member name="M:WinUtilities.Input.SendInput(WinUtilities.WinAPI.INPUT[])">
            <summary>Send input with the SendInput API</summary>
        </member>
        <member name="M:WinUtilities.Input.SendEvent(WinUtilities.WinAPI.INPUT[])">
            <summary>Send input with the event API</summary>
        </member>
        <member name="M:WinUtilities.Input.SendControl(WinUtilities.Window,WinUtilities.WinAPI.INPUT[])">
            <summary>Send input directly to windows</summary>
        </member>
        <member name="M:WinUtilities.Input.RawKeyboardInput(WinUtilities.WinAPI.KEYEVENTF,WinUtilities.Key,WinUtilities.ScanCode)">
            <summary>Build a keyboard input object with given data</summary>
        </member>
        <member name="M:WinUtilities.Input.RawMouseInput(WinUtilities.WinAPI.MOUSEEVENTF,System.Int32,System.Int32,System.Int32)">
            <summary>Build a mouse input object with given data</summary>
        </member>
        <member name="M:WinUtilities.Input.GetInput(WinUtilities.Key,System.Boolean)">
            <summary>Get a key as input</summary>
        </member>
        <member name="M:WinUtilities.Input.GetKeyboardInput(WinUtilities.Key,System.Boolean)">
            <summary>Get a keyboard event as input</summary>
        </member>
        <member name="M:WinUtilities.Input.GetMouseInput(WinUtilities.Key,System.Boolean)">
            <summary>Get a mouse event as input</summary>
        </member>
        <member name="M:WinUtilities.Input.GetMouseInputX(WinUtilities.Key,System.Boolean)">
            <summary>Get a mouse extra button event as input</summary>
        </member>
        <member name="M:WinUtilities.Input.GetMouseInputScroll(WinUtilities.Key,System.Int32)">
            <summary>Get a scroll event as input</summary>
        </member>
        <member name="M:WinUtilities.Input.GetMouseInputMove(System.Int32,System.Int32,System.Boolean)">
            <summary>Get a mouse move as input</summary>
        </member>
        <member name="M:WinUtilities.Input.GetCharInput(System.Char)">
            <summary>Get an input object from a character</summary>
        </member>
        <member name="M:WinUtilities.Input.ToInputList(WinUtilities.Key[],System.Nullable{System.Boolean})">
            <summary>Turn an array of keys into inputs</summary>
        </member>
        <member name="M:WinUtilities.Input.ToInputList(System.String)">
            <summary>Parse a string to a list of inputs</summary>
        </member>
        <member name="M:WinUtilities.Input.IndexOfNext``1(``0[],``0,System.Int32)">
            <summary>Return the index of the next matching item of an array</summary>
        </member>
        <member name="T:WinUtilities.Input.InputParseObject">
            <summary>Object used to parse special text input</summary>
        </member>
        <member name="T:WinUtilities.Monitor">
            <summary>Class for the retrieving of info and the control of monitors</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Name">
            <summary>The device name of the monitor</summary>
        </member>
        <member name="P:WinUtilities.Monitor.IsPrimary">
            <summary>Check if the monitor is the primary monitor</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Area">
            <summary>The area of the monitor</summary>
        </member>
        <member name="P:WinUtilities.Monitor.WorkArea">
            <summary>The work area of the monitor, excludes the taskbar</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Handle">
            <summary>Handle to the monitor</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Primary">
            <summary>Retrieve the current primary monitor</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Screen">
            <summary>Get the total screen area</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Count">
            <summary>The amount of current monitors</summary>
        </member>
        <member name="P:WinUtilities.Monitor.ScreenImage">
            <summary>Get the entire screen as an image</summary>
        </member>
        <member name="P:WinUtilities.Monitor.IsPortrait">
            <summary>Check if the monitor is in portrait mode instead of landscape</summary>
        </member>
        <member name="P:WinUtilities.Monitor.Image">
            <summary>Get the monitor's area as an image</summary>
        </member>
        <member name="M:WinUtilities.Monitor.#ctor(System.String,System.Boolean,System.IntPtr,WinUtilities.Area,WinUtilities.Area)">
            <summary>Create a new monitor object</summary>
        </member>
        <member name="M:WinUtilities.Monitor.FromPoint(System.Int32,System.Int32,WinUtilities.MonitorDefault)">
            <summary>Find the monitor the that contains the specified point</summary>
        </member>
        <member name="M:WinUtilities.Monitor.FromPoint(WinUtilities.Coord,WinUtilities.MonitorDefault)">
            <summary>Find the monitor the that contains the specified point</summary>
        </member>
        <member name="M:WinUtilities.Monitor.FromMouse">
            <summary>Find the monitor the mouse is on currently</summary>
        </member>
        <member name="M:WinUtilities.Monitor.FromWindow(WinUtilities.Window,WinUtilities.MonitorDefault)">
            <summary>Find the monitor the specified window is on currently</summary>
        </member>
        <member name="M:WinUtilities.Monitor.FromArea(WinUtilities.Area,WinUtilities.MonitorDefault)">
            <summary>Find the best fitting monitor for the specified area</summary>
        </member>
        <member name="M:WinUtilities.Monitor.FromIndex(System.Int32)">
            <summary>Find a monitor with a specific index. Don't rely on the index staying the same between restarts or monitor disconnects.</summary>
        </member>
        <member name="M:WinUtilities.Monitor.SetIdle(System.Boolean)">
            <summary>Sets the monitors into a 'sleep' state, any user activity wakes them up</summary>
        </member>
        <member name="M:WinUtilities.Monitor.GetImage(WinUtilities.Area)">
            <summary>Retrieve an image from the current screen</summary>
        </member>
        <member name="M:WinUtilities.Monitor.SetPrimary">
            <summary>Set as the current primary monitor</summary>
        </member>
        <member name="M:WinUtilities.Monitor.SetOrientation(WinUtilities.Monitor.Orientation)">
            <summary>Set the orientation of the monitor</summary>
        </member>
        <member name="M:WinUtilities.Monitor.HandleFromPoint(System.Int32,System.Int32,WinUtilities.MonitorDefault)">
            <summary>Retrieve a handle to a monitor that contains the given point</summary>
        </member>
        <member name="M:WinUtilities.Monitor.HandleFromPoint(WinUtilities.Coord,WinUtilities.MonitorDefault)">
            <summary>Retrieve a handle to a monitor that contains the given point</summary>
        </member>
        <member name="M:WinUtilities.Monitor.HandleFromWindow(WinUtilities.Window,WinUtilities.MonitorDefault)">
            <summary>Retrieve a handle to a monitor that contains the given window</summary>
        </member>
        <member name="M:WinUtilities.Monitor.HandleFromArea(WinUtilities.Area,WinUtilities.MonitorDefault)">
            <summary>Retrieve a handle to a monitor that best fits the given area</summary>
        </member>
        <member name="M:WinUtilities.Monitor.HandleFromIndex(System.Int32)">
            <summary>Retrieve a handle to a monitor with an index</summary>
        </member>
        <member name="M:WinUtilities.Monitor.GetMonitor(System.IntPtr)">
            <summary>Retrieve a monitor with a handle</summary>
        </member>
        <member name="M:WinUtilities.Monitor.GetMonitors">
            <summary>Retrieve all current monitors as a list</summary>
        </member>
        <member name="T:WinUtilities.Monitor.Orientation">
            <summary>Representation of a monitor orientation</summary>
        </member>
        <member name="F:WinUtilities.Monitor.Orientation.Landscape">
            <summary>Image pointed up</summary>
        </member>
        <member name="F:WinUtilities.Monitor.Orientation.Portrait">
            <summary>Image pointed left</summary>
        </member>
        <member name="F:WinUtilities.Monitor.Orientation.LandscapeFlipped">
            <summary>Image pointed down</summary>
        </member>
        <member name="F:WinUtilities.Monitor.Orientation.PortraitFlipped">
            <summary>Image pointed right</summary>
        </member>
        <member name="T:WinUtilities.Mouse">
            <summary>Class for controlling the mouse</summary>
        </member>
        <member name="P:WinUtilities.Mouse.Position">
            <summary>Position of the mouse</summary>
        </member>
        <member name="P:WinUtilities.Mouse.IsVisible">
            <summary>Check if the mouse is visible</summary>
        </member>
        <member name="P:WinUtilities.Mouse.IsConfined">
            <summary>Check if the mouse if confined to an area</summary>
        </member>
        <member name="P:WinUtilities.Mouse.ConfinedArea">
            <summary>Retrieve the area the mouse is contained in</summary>
        </member>
        <member name="P:WinUtilities.Mouse.CursorType">
            <summary>Retrieve the current type of the mouse</summary>
        </member>
        <member name="P:WinUtilities.Mouse.ButtonAmount">
            <summary>Check how many buttons the mouse has</summary>
        </member>
        <member name="P:WinUtilities.Mouse.IsHidden">
            <summary>Check if the mouse is hidden by this process</summary>
        </member>
        <member name="M:WinUtilities.Mouse.Click(System.Nullable{WinUtilities.Coord},WinUtilities.CoordRelation)">
            <summary>Send a left click</summary>
        </member>
        <member name="M:WinUtilities.Mouse.RightClick(System.Nullable{WinUtilities.Coord},WinUtilities.CoordRelation)">
            <summary>Send a right click</summary>
        </member>
        <member name="M:WinUtilities.Mouse.MiddleClick(System.Nullable{WinUtilities.Coord},WinUtilities.CoordRelation)">
            <summary>Send a middle click</summary>
        </member>
        <member name="M:WinUtilities.Mouse.DoubleClick(System.Nullable{WinUtilities.Coord},WinUtilities.CoordRelation)">
            <summary>Send a double click</summary>
        </member>
        <member name="M:WinUtilities.Mouse.Scroll(WinUtilities.Key,System.Double)">
            <summary>Send a scroll wheel event</summary>
        </member>
        <member name="M:WinUtilities.Mouse.Scroll(WinUtilities.Key,System.Int32)">
            <summary>Send a scroll wheel event</summary>
        </member>
        <member name="M:WinUtilities.Mouse.Move(System.Int32,System.Int32,WinUtilities.CoordRelation)">
            <summary>Move the mouse to a point</summary>
        </member>
        <member name="M:WinUtilities.Mouse.Move(WinUtilities.Coord,WinUtilities.CoordRelation)">
            <summary>Move the mouse to a point</summary>
        </member>
        <member name="M:WinUtilities.Mouse.ConfineToArea(System.Nullable{WinUtilities.Area})">
            <summary>Restrict cursor movement to within the specified area.</summary>
            <param name="area">Set null to free the cursor.</param>
        </member>
        <member name="M:WinUtilities.Mouse.Hide(System.Boolean)">
            <summary>This will fuck up cursor if the program exits while the cursor is hidden.</summary>
        </member>
        <member name="T:WinUtilities.CursorTypes">
            <summary>Helper class for controlling the look of the cursor</summary>
        </member>
        <member name="P:WinUtilities.CursorTypes.Types">
            <summary>Dictionary of handle -> Type of the different cursors</summary>
        </member>
        <member name="P:WinUtilities.CursorTypes.Reverse">
            <summary>Dictionary of Type -> Handle of the different cursors</summary>
        </member>
        <member name="P:WinUtilities.CursorTypes.Invisible">
            <summary>Handle to an invisible cursor</summary>
        </member>
        <member name="P:WinUtilities.CursorTypes.Arrow">
            <summary>Handle to the default cursor</summary>
        </member>
        <member name="M:WinUtilities.CursorTypes.FromHandle(System.IntPtr)">
            <summary>Get the type of a cursor from its handle</summary>
        </member>
        <member name="M:WinUtilities.CursorTypes.FromType(WinUtilities.CursorType)">
            <summary>Get the handle of a cursor from its type</summary>
        </member>
        <member name="M:WinUtilities.CursorTypes.CreateInvisibleCursor">
            <summary>Create an instance of an invisible cursor</summary>
        </member>
        <member name="T:WinUtilities.SystemUtils">
            <summary>Some utilities used to perform system actions</summary>
        </member>
        <member name="M:WinUtilities.SystemUtils.Lock">
            <summary>Go to windows lock screen</summary>
        </member>
        <member name="M:WinUtilities.SystemUtils.Internet(System.Boolean)">
            <summary>Enable/disable current internet connection</summary>
        </member>
        <member name="M:WinUtilities.SystemUtils.Shutdown(System.Int32)">
            <summary>Shutdown the computer</summary>
            <param name="delay">Delay until activation in seconds</param>
        </member>
        <member name="M:WinUtilities.SystemUtils.Restart(System.Int32)">
            <summary>Restart the computer</summary>
            <param name="delay">Delay until activation in seconds</param>
        </member>
        <member name="M:WinUtilities.SystemUtils.Sleep(System.Int32)">
            <summary>Put the computer to sleep</summary>
            <param name="delay">Delay until activation in seconds</param>
        </member>
        <member name="M:WinUtilities.SystemUtils.StopShutdown">
            <summary>Stops Shutdown, Restart or Sleep started from this process</summary>
        </member>
        <member name="T:WinUtilities.AppVolume">
            <summary>Class for controlling a specific application's volume</summary>
            <remarks>Note: if created by exe name, new audio sources with the same exe name will not be controlled</remarks>
        </member>
        <member name="P:WinUtilities.AppVolume.Volume">
            <summary>Get or set the volume of the included process/processes</summary>
        </member>
        <member name="P:WinUtilities.AppVolume.Mute">
            <summary>Get or set the mute of the included process/processes</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.New(System.UInt32)">
            <summary>Get app volume controller by process id</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.New(System.String)">
            <summary>Get app volume controller by exe name</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.GetVolume">
            <summary>Get the volume of the included process/processes</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.SetVolume(System.Single)">
            <summary>Set the volume of the included process/processes</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.GetMute">
            <summary>Get the mute of the included process/processes</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.SetMute(System.Boolean)">
            <summary>Set the mute of the included process/processes</summary>
        </member>
        <member name="M:WinUtilities.AppVolume.Dispose">
            <summary></summary>
        </member>
        <member name="T:WinUtilities.AudioDevice">
            <summary>Audio device used to set its volume or default device</summary>
        </member>
        <member name="P:WinUtilities.AudioDevice.ID">
            <summary>ID of the audio device</summary>
        </member>
        <member name="P:WinUtilities.AudioDevice.Name">
            <summary>Display name of the audio device</summary>
        </member>
        <member name="P:WinUtilities.AudioDevice.Volume">
            <summary>Control the device's master volume</summary>
        </member>
        <member name="F:WinUtilities.AudioDevice.PreviousRole">
            <summary>Role of the device when fetched</summary>
        </member>
        <member name="M:WinUtilities.AudioDevice.#ctor(System.String,System.Nullable{WinUtilities.CoreAudio.Enumerations.ERole})">
            <summary></summary>
        </member>
        <member name="M:WinUtilities.AudioDevice.SetDefault">
            <summary>Set device as the default device</summary>
        </member>
        <member name="M:WinUtilities.AudioDevice.GetVolume">
            <summary>Get device's master volume</summary>
        </member>
        <member name="M:WinUtilities.AudioDevice.SetVolume(System.Single)">
            <summary>Set device's master volume</summary>
        </member>
        <member name="M:WinUtilities.AudioDevice.Dispose">
            <summary></summary>
        </member>
        <member name="T:WinUtilities.WinAudio">
            <summary>Tools to control audio volume and devices</summary>
        </member>
        <member name="P:WinUtilities.WinAudio.MasterVolume">
            <summary>Get or set current audio device volume</summary>
        </member>
        <member name="P:WinUtilities.WinAudio.MasterMute">
            <summary>Get or set current audio device mute</summary>
        </member>
        <member name="E:WinUtilities.WinAudio.DeviceChanged">
            <summary>Subscribe to default audio device change</summary>
        </member>
        <member name="E:WinUtilities.WinAudio.DeviceAdded">
            <summary>Subscribe to audio device adding</summary>
        </member>
        <member name="E:WinUtilities.WinAudio.DeviceRemoved">
            <summary>Subscribe to audio device removing</summary>
        </member>
        <member name="E:WinUtilities.WinAudio.DeviceStateChanged">
            <summary>Subscribe to audio device state change</summary>
        </member>
        <member name="M:WinUtilities.WinAudio.GetApp(System.UInt32)">
            <summary>Get app volume controller by process id</summary>
        </member>
        <member name="M:WinUtilities.WinAudio.GetApp(System.String)">
            <summary>Get app volume controller by exe name</summary>
        </member>
        <member name="M:WinUtilities.WinAudio.HasAudioSource(System.UInt32)">
            <summary>Check if the specified process is playing audio</summary>
        </member>
        <member name="M:WinUtilities.WinAudio.HasAudioSource(System.String)">
            <summary>Check if any process with a specified exe name is playing audio</summary>
        </member>
        <member name="T:WinUtilities.WinMatchType">
            <summary>Specifies how string matching is performed</summary>
        </member>
        <member name="F:WinUtilities.WinMatchType.RegEx">
            <summary>Uses regex expression matching</summary>
        </member>
        <member name="F:WinUtilities.WinMatchType.Full">
            <summary>The string must match</summary>
        </member>
        <member name="F:WinUtilities.WinMatchType.Partial">
            <summary>The string must be contained in the target</summary>
        </member>
        <member name="T:WinUtilities.IWinMatch">
            <summary>A window match object for checking and finding windows</summary>
        </member>
        <member name="P:WinUtilities.IWinMatch.AsList">
            <summary>Get whitelisted matches as a list</summary>
        </member>
        <member name="P:WinUtilities.IWinMatch.IsReverse">
            <summary>Reverse the result of the match</summary>
        </member>
        <member name="P:WinUtilities.IWinMatch.AsReverse">
            <summary>Get a reversed match</summary>
        </member>
        <member name="M:WinUtilities.IWinMatch.Match(WinUtilities.Window)">
            <summary>Check if the given window matches</summary>
        </member>
        <member name="M:WinUtilities.IWinMatch.Match(WinUtilities.WindowInfo)">
            <summary>Check if the given info matches</summary>
        </member>
        <member name="M:WinUtilities.IWinMatch.ForAll(System.Action{WinUtilities.Window},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows</summary>
        </member>
        <member name="M:WinUtilities.IWinMatch.ForAll(System.Func{WinUtilities.Window,System.Boolean},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="M:WinUtilities.IWinMatch.ForAll(System.Func{WinUtilities.Window,System.Threading.Tasks.Task{System.Boolean}},WinUtilities.WinFindMode)">
            <summary>Perform an async action on all matching windows one at a time. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="M:WinUtilities.MatchActions.ForAll(WinUtilities.IWinMatch,System.Func{WinUtilities.Window,System.Boolean},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="M:WinUtilities.MatchActions.ForAll(WinUtilities.IWinMatch,System.Func{WinUtilities.Window,System.Threading.Tasks.Task{System.Boolean}},WinUtilities.WinFindMode)">
            <summary>Perform an async action on all matching windows one at a time. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="T:WinUtilities.BorderlessInfo">
            <summary>An object that specifies additional borderless settings for all matching windows</summary>
        </member>
        <member name="F:WinUtilities.BorderlessInfo.match">
            <summary>Specifies which windows are affected by this setting</summary>
        </member>
        <member name="F:WinUtilities.BorderlessInfo.offset">
            <summary></summary>
        </member>
        <member name="M:WinUtilities.BorderlessInfo.#ctor(WinUtilities.IWinMatch,WinUtilities.Area)">
            <summary>An object that specifies additional borderless settings for all matching windows</summary>
            <param name="match">Specifies which windows are affected by this setting</param>
            <param name="offset">Amount cropped inwards from each edge of the window. Width and height here mean the amount cropped from right and bottom.</param>
        </member>
        <member name="M:WinUtilities.BorderlessInfo.#ctor(WinUtilities.IWinMatch,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>An object that specifies additional borderless settings for all matching windows</summary>
            <param name="match">Specifies which windows are affected by this setting</param>
            <param name="left">Amount cropped inwards from the left edge</param>
            <param name="top">Amount cropped inwards from the top edge</param>
            <param name="right">Amount cropped inwards from the right edge</param>
            <param name="bottom">Amount cropped inwards from the bottom edge</param>
        </member>
        <member name="T:WinUtilities.WinFindMode">
            <summary>Specifies what mode is used when enumerating windows</summary>
        </member>
        <member name="F:WinUtilities.WinFindMode.All">
            <summary>Enumerates all existing windows</summary>
        </member>
        <member name="F:WinUtilities.WinFindMode.TopLevel">
            <summary>Enumerates top level windows on any virtual desktop</summary>
        </member>
        <member name="F:WinUtilities.WinFindMode.CurrentDesktop">
            <summary>Enumerates top level windows on current virtual desktop</summary>
        </member>
        <member name="T:WinUtilities.Window">
            <summary>A wrapper object for a windows window</summary>
        </member>
        <member name="P:WinUtilities.Window.Hwnd">
            <summary>The handle of the window</summary>
        </member>
        <member name="P:WinUtilities.Window.Title">
            <summary>The title of the window</summary>
        </member>
        <member name="P:WinUtilities.Window.Class">
            <summary>The class of the window</summary>
        </member>
        <member name="P:WinUtilities.Window.Exe">
            <summary>The name of this window's <see cref="T:System.Diagnostics.Process"/>' .exe file. The .exe part is excluded</summary>
        </member>
        <member name="P:WinUtilities.Window.ExePath">
            <summary>The path of this window's exe file</summary>
        </member>
        <member name="P:WinUtilities.Window.PID">
            <summary>The process handle of this window's <see cref="T:System.Diagnostics.Process"/></summary>
        </member>
        <member name="P:WinUtilities.Window.Process">
            <summary>The <see cref="T:System.Diagnostics.Process"/> this window belongs to. Getting this info is slow (1000x slower than other properties) so prefer other ways like ExePath and Exe if possible.</summary>
        </member>
        <member name="P:WinUtilities.Window.ThreadID">
            <summary>The ID of the system thread that spawned this window</summary>
        </member>
        <member name="P:WinUtilities.Window.IsVisible">
            <summary>Check if the window is not hidden</summary>
        </member>
        <member name="P:WinUtilities.Window.IsEnabled">
            <summary>Check if the window is interactable</summary>
        </member>
        <member name="P:WinUtilities.Window.IsActive">
            <summary>Check if the window is the foreground window</summary>
        </member>
        <member name="P:WinUtilities.Window.Exists">
            <summary>Check if a window with this handle still exists</summary>
        </member>
        <member name="P:WinUtilities.Window.IsOnCurrentDesktop">
            <summary>Check if the window resides on the current virtual desktop</summary>
        </member>
        <member name="P:WinUtilities.Window.IsAlwaysOnTop">
            <summary>Check if this is a top level window</summary>
        </member>
        <member name="P:WinUtilities.Window.IsClickThrough">
            <summary>Check if clicks go through the window</summary>
        </member>
        <member name="P:WinUtilities.Window.IsChild">
            <summary>Check if this is a child window of some other window</summary>
        </member>
        <member name="P:WinUtilities.Window.IsMaximized">
            <summary>Check if the window is maximized</summary>
        </member>
        <member name="P:WinUtilities.Window.IsMinimized">
            <summary>Check if the window is minimized</summary>
        </member>
        <member name="P:WinUtilities.Window.IsFullscreen">
            <summary>Check if the window is fullscreen</summary>
        </member>
        <member name="P:WinUtilities.Window.IsBorderless">
            <summary>Check if the window is set to borderless mode</summary>
        </member>
        <member name="P:WinUtilities.Window.IsTopLevel">
            <summary>Check if the window is a proper visible foreground window</summary>
        </member>
        <member name="P:WinUtilities.Window.Style">
            <summary>Full combination of the associated Window Styles</summary>
        </member>
        <member name="P:WinUtilities.Window.ExStyle">
            <summary>Full combination of the associated Window Ex Styles</summary>
        </member>
        <member name="P:WinUtilities.Window.Opacity">
            <summary>The percentage of how see-through the window is. Uses a cached value.</summary>
        </member>
        <member name="P:WinUtilities.Window.Transcolor">
            <summary>The color of the window that is rendered as fully transparent. Uses a cached value.</summary>
        </member>
        <member name="P:WinUtilities.Window.HasRegion">
            <summary>Check if a window has a region</summary>
        </member>
        <member name="P:WinUtilities.Window.RegionType">
            <summary>Check the type of the region</summary>
        </member>
        <member name="P:WinUtilities.Window.RegionBounds">
            <summary>Get the bounding area of the current region. Relative to raw window coordinates</summary>
        </member>
        <member name="M:WinUtilities.Window.CalculateRealArea(System.Nullable{WinUtilities.Area},System.Nullable{WinUtilities.Area},System.Nullable{WinUtilities.Area})">
            <summary>Attempt at reusing area information because getting them is somewhat costly</summary>
        </member>
        <member name="P:WinUtilities.Window.Area">
            <summary>A corrected version of the window's area</summary>
        </member>
        <member name="P:WinUtilities.Window.RawArea">
            <summary>The area of the window as given by the OS</summary>
        </member>
        <member name="P:WinUtilities.Window.ClientArea">
            <summary>The client area of the window. Excludes the caption and the borders</summary>
        </member>
        <member name="P:WinUtilities.Window.BorderlessArea">
            <summary>The visible area of the window when in borderless mode</summary>
        </member>
        <member name="P:WinUtilities.Window.BorderlessSettings">
            <summary>A list of borderless settings that direct window behaviour when setting to borderless mode</summary>
        </member>
        <member name="P:WinUtilities.Window.CachedWindows">
            <summary>Contains the cached windows from the last time the windows were enumerated</summary>
        </member>
        <member name="P:WinUtilities.Window.None">
            <summary>A window object that doesn't point to any window</summary>
        </member>
        <member name="P:WinUtilities.Window.Active">
            <summary>Retrieves the active window</summary>
        </member>
        <member name="P:WinUtilities.Window.FromMouse">
            <summary>Retrieves the first window under the mouse</summary>
        </member>
        <member name="P:WinUtilities.Window.This">
            <summary>Retrieves the current process's windows</summary>
        </member>
        <member name="P:WinUtilities.Window.IsNone">
            <summary>Check if the hwnd is zero meaning it points to nothing</summary>
        </member>
        <member name="P:WinUtilities.Window.IsValid">
            <summary>Check if the object points to a real window. Also validates deserialized objects in case hwnd values were recycled by the OS by comparing the class name.</summary>
        </member>
        <member name="P:WinUtilities.Window.Parent">
            <summary>The parent of the window</summary>
        </member>
        <member name="P:WinUtilities.Window.Ancestor">
            <summary>The topmost window in the window's parent chain</summary>
        </member>
        <member name="P:WinUtilities.Window.Owner">
            <summary>The topmost window in the window's parent chain on a deeper level than <see cref="P:WinUtilities.Window.Ancestor"/></summary>
        </member>
        <member name="P:WinUtilities.Window.Siblings">
            <summary>Retrieves all window of the same process.</summary>
        </member>
        <member name="P:WinUtilities.Window.Monitor">
            <summary>Handle of the <see cref="T:WinUtilities.Monitor"/> the window is on</summary>
        </member>
        <member name="P:WinUtilities.Window.Desktop">
            <summary>Get the id of the virtual desktop the window is on</summary>
        </member>
        <member name="P:WinUtilities.Window.AsMatch">
            <summary>Get a match object that only matches this window</summary>
        </member>
        <member name="P:WinUtilities.Window.Audio">
            <summary>Get the application specific volume controller</summary>
        </member>
        <member name="M:WinUtilities.Window.Match(WinUtilities.IWinMatch)">
            <summary>Check if the window matches with the given description.</summary>
        </member>
        <member name="M:WinUtilities.Window.ContainsPoint(WinUtilities.Coord)">
            <summary>Check if the <paramref name="point"/> is inside the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.ContainsPoint(System.Int32,System.Int32)">
            <summary>Check if the point is inside the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.ContainsMouse">
            <summary>Check if the <see cref="T:WinUtilities.Mouse"/> is inside the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.GetSection(System.Int32,System.Int32)">
            <summary>Check what part of the window the given point is a part of.</summary>
        </member>
        <member name="M:WinUtilities.Window.GetSection(WinUtilities.Coord)">
            <summary>Check what part of the window the given <paramref name="point"/> is a part of.</summary>
        </member>
        <member name="M:WinUtilities.Window.IsTitlebar(System.Int32,System.Int32)">
            <summary>Check if the given point is part of the titlebar.</summary>
        </member>
        <member name="M:WinUtilities.Window.IsTitlebar(WinUtilities.Coord)">
            <summary>Check if the given <paramref name="point"/> is part of the titlebar.</summary>
        </member>
        <member name="M:WinUtilities.Window.HasStyle(WinUtilities.WS)">
            <summary>Check for individual Window Styles.</summary>
        </member>
        <member name="M:WinUtilities.Window.HasExStyle(WinUtilities.WS_EX)">
            <summary>Check for individual Window Ex Styles.</summary>
        </member>
        <member name="M:WinUtilities.Window.Activate(WinUtilities.Window.Activation)">
            <summary>Set this window as the foreground window</summary>
        </member>
        <member name="M:WinUtilities.Window.ActivateAsync(WinUtilities.Window.Activation)">
            <summary>Set the window as the foreground window and wait for the operation to finish. Returns true on success.</summary>
        </member>
        <member name="M:WinUtilities.Window.ActivateForce(System.Boolean)">
            <summary>Forceful window activation</summary>
        </member>
        <member name="M:WinUtilities.Window.ActivateComplex(System.Boolean)">
            <summary>A complex but more reliable window activation</summary>
        </member>
        <member name="M:WinUtilities.Window.ActivateSimple(System.Int32)">
            <summary>Activate a window and check if it succeeded</summary>
        </member>
        <member name="M:WinUtilities.Window.Deactivate">
            <summary>If active, Move the window to the bottom and activate the highest window</summary>
        </member>
        <member name="M:WinUtilities.Window.Enable(System.Boolean)">
            <summary>Enable/disable the window. Disabled windows cannot be interacted with.</summary>
        </member>
        <member name="M:WinUtilities.Window.Kill">
            <summary>Kill the process associated with the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.Close">
            <summary>Send a request to close to the window. Returns true on success.</summary>
        </member>
        <member name="M:WinUtilities.Window.Minimize">
            <summary>Minimize the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.Maximize">
            <summary>Maximize the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.Restore">
            <summary>Restore the window from a minimized or a maximized state to normal.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetVisible(System.Boolean)">
            <summary>Set window visibility. False hides the window from the user completely. It's more complex than simple transparency.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetVisibleSoft(System.Boolean)">
            <summary>Normally hidden windows often have weird alternate behaviour. This version is less prone to that while not 'truly' hiding a window.</summary>
        </member>
        <member name="M:WinUtilities.Window.PostMessage(WinUtilities.WM,System.Int32,System.Int32)">
            <summary>Post a message to the window's message pump. Returns true on success.</summary>
        </member>
        <member name="M:WinUtilities.Window.SendMessage(WinUtilities.WM,System.Int32,System.Int32)">
            <summary>Send a message the window's message pump. Waits for a reply from the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetStyle(WinUtilities.WS,System.Boolean)">
            <summary>Set individual Window Styles on and off.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetExStyle(WinUtilities.WS_EX,System.Boolean)">
            <summary>Set individual Window Ex Styles on and off.</summary>
        </member>
        <member name="M:WinUtilities.Window.MoveTop">
            <summary>Brings the window to the top of visibility.</summary>
        </member>
        <member name="M:WinUtilities.Window.MoveBottom">
            <summary>Drop the window to the bottom of visibility.</summary>
        </member>
        <member name="M:WinUtilities.Window.MoveUnder(WinUtilities.Window)">
            <summary>Move this window under the specified window in visibility.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetAlwaysOnTop(System.Boolean)">
            <summary>Make a window always stay visible.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetClickThrough(System.Boolean)">
            <summary>Make clicks phase through the window to the windows below.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetOpacity(System.Double)">
            <summary>Set the degree of see-through of the window in percentages.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetTranscolor(System.Drawing.Color)">
            <summary>Set the color of the window that is rendered as fully transparent.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetTransOff">
            <summary>Fully disable transparency. Might improve performance after window transparency has been tweaked.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetParent(WinUtilities.Window)">
            <summary>Set the parent window of this window</summary>
        </member>
        <member name="M:WinUtilities.Window.SetParent(WinUtilities.Window,WinUtilities.Window@)">
            <summary>Set the parent window of this window</summary>
        </member>
        <member name="M:WinUtilities.Window.UnlockSize">
            <summary>Disable the resizing limits of the window.</summary>
        </member>
        <member name="M:WinUtilities.Window.Move(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},WinUtilities.CoordType)">
            <summary>Move the window to the new coordinates.</summary>
            <param name="x">Left edge of the window. Null to not change.</param>
            <param name="y">Top edge of the window. Null to not change.</param>
            <param name="w">Width of the window. Null to not change.</param>
            <param name="h">Height of the window. Null to not change.</param>
            <param name="type">Set what the coordinates are relative to.</param>
        </member>
        <member name="M:WinUtilities.Window.Move(System.Nullable{WinUtilities.Coord},System.Nullable{WinUtilities.Coord},WinUtilities.CoordType)">
            <summary>Move the window to the new coordinates.</summary>
            <param name="point">Location of the window. Null to not move the window.</param>
            <param name="size">Size of the window. Null to not resize the window.</param>
            <param name="type">Set what the coordinates are relative to.</param>
        </member>
        <member name="M:WinUtilities.Window.Move(WinUtilities.Area,WinUtilities.CoordType)">
            <summary>Move the window to the new coordinates.</summary>
            <param name="pos">The target area of the window.</param>
            <param name="type">Set what the coordinates are relative to.</param>
        </member>
        <member name="M:WinUtilities.Window.OffsetMove(WinUtilities.Area,WinUtilities.Area)">
            <summary>Move a window by using an offset.</summary>
        </member>
        <member name="M:WinUtilities.Window.Center(System.Boolean)">
            <summary>Center the window to the specified monitor.</summary>
            <param name="ignoreTaskbar">Set to true to ignore the space taken by the taskbar when calculating centering.</param>
        </member>
        <member name="M:WinUtilities.Window.Center(WinUtilities.Coord,System.Boolean)">
            <summary>Center the window to the specified monitor.</summary>
            <param name="size">Set the target size of the window before centering.</param>
            <param name="ignoreTaskbar">Set to true to ignore the space taken by the taskbar when calculating centering.</param>
        </member>
        <member name="M:WinUtilities.Window.Center(System.Nullable{System.Int32},System.Nullable{WinUtilities.Coord},System.Boolean)">
            <summary>Center the window to the specified monitor.</summary>
            <param name="monitor">Index of the target monitor. Null targets current monitor. Zero based indexing.</param>
            <param name="size">Set the target size of the window before centering.</param>
            <param name="ignoreTaskbar">Set to true to ignore the space taken by the taskbar when calculating centering.</param>
        </member>
        <member name="M:WinUtilities.Window.MoveToDesktop(System.Guid)">
            <summary>Move the window to a virtual desktop with the specifid id</summary>
        </member>
        <member name="M:WinUtilities.Window.SetRegion(WinUtilities.Area)">
            <summary>Set only a specified area of a window visible.</summary>
            <param name="region">Relative to raw window coordinates.</param>
        </member>
        <member name="M:WinUtilities.Window.SetRoundedRegion(WinUtilities.Area,System.Int32,System.Int32)">
            <summary>Set only a specified area of a window visible. Has rounded corners.</summary>
            <param name="region">Relative to raw window coordinates.</param>
            <param name="horizontalRounding">Amount of horizontal rounding</param>
            <param name="verticalRounding">Amount of vertical rounding</param>
        </member>
        <member name="M:WinUtilities.Window.SetEllipticRegion(WinUtilities.Area)">
            <summary>Set only a specified area of a window visible. Has an elliptic shape.</summary>
            <param name="region">Relative to raw window coordinates.</param>
        </member>
        <member name="M:WinUtilities.Window.SetComplexRegion(WinUtilities.Area[])">
            <summary>Set only a specified area of a window visible. Create a region with multiple areas.</summary>
            <param name="regions">Relative to raw window coordinates.</param>
        </member>
        <member name="M:WinUtilities.Window.SetComplexRegion(WinUtilities.Coord[])">
            <summary>Set only a specified area of a window visible. Create a polygon shape with multiple points.</summary>
            <param name="points">Relative to raw window coordinates.</param>
        </member>
        <member name="M:WinUtilities.Window.SetComplexRegion(WinUtilities.WinAPI.FillRgnFlags,WinUtilities.Coord[])">
            <summary>Set only a specified area of a window visible. Create a polygon shape with multiple points.</summary>
            <param name="fillType">Set the fill logic of when lines intersect</param>
            <param name="points">Relative to raw window coordinates</param>
        </member>
        <member name="M:WinUtilities.Window.RemoveRegion">
            <summary>Remove the window's region to display the full window.</summary>
        </member>
        <member name="M:WinUtilities.Window.SetBorderless(System.Boolean)">
            <summary>Set the window to borderless mode.</summary>
        </member>
        <member name="M:WinUtilities.Window.CalculateBorderlessRegion(WinUtilities.Area,WinUtilities.Area)">
            <summary>Return region.</summary>
        </member>
        <member name="M:WinUtilities.Window.CalculateBorderlessArea(WinUtilities.Area)">
            <summary>Return screen coordinates of the visible area when borderless.</summary>
        </member>
        <member name="M:WinUtilities.Window.GetImage(System.Boolean)">
            <summary>Get an image of the window using BitBlt</summary>
            <param name="clientOnly">Capture only the client area</param>
        </member>
        <member name="M:WinUtilities.Window.GetImage(WinUtilities.Area,System.Boolean)">
            <summary>Get a cropped image of the window using BitBlt</summary>
            <param name="subArea">Set the capture sub area relative to the full capture area</param>
            <param name="clientOnly">Capture only the client area</param>
        </member>
        <member name="M:WinUtilities.Window.GetImagePrint(System.Boolean)">
            <summary>Get an image of the window using WindowPrint API. Capable of imaging off screen windows.</summary>
        </member>
        <member name="M:WinUtilities.Window.GetImageDesktop(System.Boolean)">
            <summary>Get an image of the window based on what's visible on the desktop currently</summary>
            <param name="clientOnly">Capture only the client area</param>
        </member>
        <member name="M:WinUtilities.Window.GetImageDesktop(WinUtilities.Area,System.Boolean)">
            <summary>Get a cropped image of the window based on what's visible on the desktop currently</summary>
            <param name="subArea">Set the capture sub area relative to the full capture area</param>
            <param name="clientOnly">Capture only the client area</param>
        </member>
        <member name="M:WinUtilities.Window.Send(System.String)">
            <summary>Send text to the window using <see cref="M:WinUtilities.Input.SendControl(WinUtilities.Window,System.String)"/></summary>
        </member>
        <member name="M:WinUtilities.Window.SendRaw(System.String)">
            <summary>Send raw text to the window using <see cref="M:WinUtilities.Input.SendControlRaw(WinUtilities.Window,System.String)"/></summary>
        </member>
        <member name="M:WinUtilities.Window.Send(WinUtilities.Key[])">
            <summary>Send key events to the window using <see cref="M:WinUtilities.Input.SendControl(WinUtilities.Window,WinUtilities.Key[])"/></summary>
        </member>
        <member name="M:WinUtilities.Window.SendDown(WinUtilities.Key[])">
            <summary>Send key down events to the window using <see cref="M:WinUtilities.Input.SendControlDown(WinUtilities.Window,WinUtilities.Key[])"/></summary>
        </member>
        <member name="M:WinUtilities.Window.SendUp(WinUtilities.Key[])">
            <summary>Send key up events to the window using <see cref="M:WinUtilities.Input.SendControlUp(WinUtilities.Window,WinUtilities.Key[])"/></summary>
        </member>
        <member name="M:WinUtilities.Window.Click(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.RightClick(WinUtilities.Coord,WinUtilities.CoordRelation)">
            <summary>Emulates a right click at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.MiddleClick(WinUtilities.Coord,WinUtilities.CoordRelation)">
            <summary>Emulates a middle click at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.ClickNA(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position. Tries to prevent window activation.</summary>
        </member>
        <member name="M:WinUtilities.Window.DoubleClick(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.DoubleClickNA(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position. Tries to prevent window activation.</summary>
        </member>
        <member name="M:WinUtilities.Window.ClickDown(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.ClickDownNA(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position. Tries to prevent window activation.</summary>
        </member>
        <member name="M:WinUtilities.Window.ClickUp(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.ClickUpNA(WinUtilities.Coord,WinUtilities.Key,WinUtilities.CoordRelation)">
            <summary>Emulates a click at the specified position. Tries to prevent window activation.</summary>
        </member>
        <member name="M:WinUtilities.Window.MouseMove(WinUtilities.Coord,WinUtilities.CoordRelation)">
            <summary>Emulates a mouse move event at the specified position.</summary>
        </member>
        <member name="M:WinUtilities.Window.Find(System.Func{WinUtilities.Window,System.Boolean})">
            <summary>Find a window that matches the given predicate</summary>
        </member>
        <member name="M:WinUtilities.Window.Find(WinUtilities.IWinMatch,WinUtilities.WinFindMode)">
            <summary>Find a window that matches the given description</summary>
        </member>
        <member name="M:WinUtilities.Window.Find(System.String,WinUtilities.WinFindMode)">
            <summary>Find a window that matches the given title</summary>
        </member>
        <member name="M:WinUtilities.Window.FindByExe(System.String,WinUtilities.WinFindMode)">
            <summary>Find a window that matches the given .exe name</summary>
        </member>
        <member name="M:WinUtilities.Window.FindByClass(System.String,WinUtilities.WinFindMode)">
            <summary>Find a window that matches the given class</summary>
        </member>
        <member name="M:WinUtilities.Window.FindByPid(System.UInt32,WinUtilities.WinFindMode)">
            <summary>Find a window whose process's id matches the given id</summary>
        </member>
        <member name="M:WinUtilities.Window.FindCached(System.Func{WinUtilities.Window,System.Boolean})">
            <summary>Find a matching window from a cached list of windows</summary>
        </member>
        <member name="M:WinUtilities.Window.FindCached(WinUtilities.IWinMatch,WinUtilities.WinFindMode)">
            <summary>Find a matching window from a cached list of windows</summary>
        </member>
        <member name="M:WinUtilities.Window.GetWindows">
            <summary>Get all existing windows</summary>
        </member>
        <member name="M:WinUtilities.Window.GetWindows(System.Func{WinUtilities.Window,System.Boolean})">
            <summary>Find all windows that match the given predicate</summary>
        </member>
        <member name="M:WinUtilities.Window.GetWindows(WinUtilities.WinFindMode)">
            <summary>Find all windows depending on the mode used</summary>
        </member>
        <member name="M:WinUtilities.Window.GetWindows(WinUtilities.IWinMatch,WinUtilities.WinFindMode)">
            <summary>Find all windows that match the given condition</summary>
        </member>
        <member name="M:WinUtilities.Window.GetWindowsCached(System.Func{WinUtilities.Window,System.Boolean})">
            <summary>Find all windows that match the given predicate using a cached list of windows</summary>
        </member>
        <member name="M:WinUtilities.Window.GetWindowsCached(WinUtilities.IWinMatch,WinUtilities.WinFindMode)">
            <summary>Find all windows that match the given condition using a cached list of windows</summary>
        </member>
        <member name="M:WinUtilities.Window.Wait(WinUtilities.IWinMatch,System.Nullable{System.Int64},System.Boolean,System.Int32)">
            <summary>Wait for a matching window to exist</summary>
            <param name="match">Set what kind of window to wait for</param>
            <param name="timeout">Time until the wait fails</param>
            <param name="ignoreCurrent">If true, only new windows will be considered</param>
            <param name="checkDelay">Set how often the windows are scanned for the target window</param>
        </member>
        <member name="M:WinUtilities.Window.WaitActive(WinUtilities.IWinMatch,System.Nullable{System.Int64},System.Boolean,System.Int32)">
            <summary>Wait for a matching window to become active</summary>
            <param name="match">Set what kind of window to wait for</param>
            <param name="timeout">Time until the wait fails</param>
            <param name="ignoreCurrent">If true, only new windows will be considered</param>
            <param name="checkDelay">Set how often the active window is checked for the target window</param>
        </member>
        <member name="M:WinUtilities.Window.ClearCache">
            <summary>Removes all entries from the list of cached windows</summary>
        </member>
        <member name="M:WinUtilities.Window.RefreshCache">
            <summary>Refresh the cache so it contains the freshest information of windows. Can be used occasionally to prevent the very unlikely window handle collisions.</summary>
        </member>
        <member name="M:WinUtilities.Window.FetchCache(System.IntPtr)">
            <summary>Fetch a matching window from cache if found, otherwise return null</summary>
        </member>
        <member name="M:WinUtilities.Window.FromPoint(System.Int32,System.Int32)">
            <summary>Get the handle of the topmost window of the given point</summary>
        </member>
        <member name="M:WinUtilities.Window.FromPoint(WinUtilities.Coord)">
            <summary>Get the handle of the topmost window of the given point</summary>
        </member>
        <member name="M:WinUtilities.Window.HwndExists(System.IntPtr)">
            <summary>Check if a window with the specified handle exists</summary>
        </member>
        <member name="M:WinUtilities.Window.HwndActive(System.IntPtr)">
            <summary>Check if a window with the specified handle is active</summary>
        </member>
        <member name="T:WinUtilities.Window.Activation">
            <summary>Determines the method of activating a window</summary>
        </member>
        <member name="F:WinUtilities.Window.Activation.Soft">
            <summary>Uses a simple activation logic that is graceful. Activation might fail sometimes.</summary>
        </member>
        <member name="F:WinUtilities.Window.Activation.Force">
            <summary>Uses a forceful method of activation that is more reliable</summary>
        </member>
        <member name="F:WinUtilities.Window.Activation.SoftThenForce">
            <summary>Tries to first use the soft activation, but will resort to force if it failed. Using this method might make the taskbar flash briefly if the soft activation fails.</summary>
        </member>
        <member name="T:WinUtilities.WindowInfo">
            <summary>An info object used for caching window information. Dynamically retrieves missing window info when requested. When info is requested once, it is cached forever.</summary>
        </member>
        <member name="M:WinUtilities.WindowInfo.#ctor(WinUtilities.Window)">
            <summary>An info object used for caching window information. Dynamically retrieves missing window info when requested. When info is requested once, it is cached forever.</summary>
        </member>
        <member name="T:WinUtilities.WinGroup">
            <summary>A match object that can have multiple match conditions</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.Whitelist">
            <summary>List of conditions to match</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.Blacklist">
            <summary>List of conditions that prevent a whitelist match</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.Size">
            <summary>Number of conditions in the whitelist</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.IsReverse">
            <summary>Reverse the result of the match</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.AsReverse">
            <summary>Get a reversed match</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.AsList">
            <summary>Get whitelisted matches as a list</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.Desktop">
            <summary>Matches the desktop</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.Taskbar">
            <summary>Matches the taskbar</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.SteamGames">
            <summary>Matches Steam games installed in a normal install folder</summary>
        </member>
        <member name="P:WinUtilities.WinGroup.Folders">
            <summary>Matches file explorer windows aka folders</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.#ctor(WinUtilities.IWinMatch[])">
            <summary>A group of window descriptions that can match a variety of windows.</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.Add(WinUtilities.IWinMatch[])">
            <summary>Add window descriptions to the Whitelist.</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.Add(WinUtilities.Window[])">
            <summary>Add windows to the Whitelist.</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.AddBlacklist(WinUtilities.IWinMatch[])">
            <summary>Add window descriptions to the Blacklist.</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.AddBlacklist(WinUtilities.Window[])">
            <summary>Add windows to the Blacklist.</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.Match(WinUtilities.Window)">
            <summary>Check if a window matches this description group.</summary>
            <remarks>The Match is true if the window matches the Whitelist but not the Blacklist.</remarks>
        </member>
        <member name="M:WinUtilities.WinGroup.Match(WinUtilities.WindowInfo)">
            <summary>Check if a window matches this description group.</summary>
            <remarks>The Match is true if the info matches the Whitelist but not the Blacklist.</remarks>
        </member>
        <member name="M:WinUtilities.WinGroup.ForAll(System.Action{WinUtilities.Window},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows</summary>
        </member>
        <member name="M:WinUtilities.WinGroup.ForAll(System.Func{WinUtilities.Window,System.Boolean},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="M:WinUtilities.WinGroup.ForAll(System.Func{WinUtilities.Window,System.Threading.Tasks.Task{System.Boolean}},WinUtilities.WinFindMode)">
            <summary>Perform an async action on all matching windows one at a time. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="T:WinUtilities.WinMatch">
            <summary>A condition that matches some windows</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.Hwnd">
            <summary>Matched window handle</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.Title">
            <summary>Matched window title</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.Class">
            <summary>Matched window class</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.Exe">
            <summary>Matched window executable name</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.ExePath">
            <summary>Matched window full executable name and path</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.PID">
            <summary>Matched window process id</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.Desktop">
            <summary>Matched desktop guid</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.IsReverse">
            <summary>Reverse the result of the match</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.AsReverse">
            <summary>Get a reversed match</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.AsList">
            <summary>Get whitelisted matches as a list</summary>
        </member>
        <member name="P:WinUtilities.WinMatch.Type">
            <summary>Specifies how the strings are matched</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.#ctor(System.Nullable{System.IntPtr},System.String,System.String,System.String,System.String,System.UInt32,System.Guid,WinUtilities.WinMatchType)">
            <summary>Create a new match condition</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.Match(WinUtilities.Window)">
            <summary>Check if the given window matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.Match(WinUtilities.WindowInfo)">
            <summary>Check if the given info matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.ForAll(System.Action{WinUtilities.Window},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.ForAll(System.Func{WinUtilities.Window,System.Boolean},WinUtilities.WinFindMode)">
            <summary>Perform an action on all matching windows. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="M:WinUtilities.WinMatch.ForAll(System.Func{WinUtilities.Window,System.Threading.Tasks.Task{System.Boolean}},WinUtilities.WinFindMode)">
            <summary>Perform an async action on all matching windows one at a time. Return false to stop enumerating windows.</summary>
            <returns>True if all found windows were enumerated</returns>
        </member>
        <member name="M:WinUtilities.WinMatch.MatchHwnd(System.Nullable{System.IntPtr})">
            <summary>Check if the window handle matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.MatchTitle(System.String)">
            <summary>Check if the window title matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.MatchClass(System.String)">
            <summary>Check if the window class matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.MatchExe(System.String)">
            <summary>Check if the window executable name matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.MatchExePath(System.String)">
            <summary>Check if the window executable path matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.MatchPID(System.UInt32)">
            <summary>Check if the window process id matches</summary>
        </member>
        <member name="M:WinUtilities.WinMatch.op_Explicit(WinUtilities.Window)~WinUtilities.WinMatch">
            <summary>Get a match object that matches the given window</summary>
        </member>
    </members>
</doc>
